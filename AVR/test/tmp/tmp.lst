
tmp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000be  00800100  00000fde  00001072  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fde  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  008001be  008001be  00001130  2**0
                  ALLOC
  3 .stab         0000207c  00000000  00000000  00001130  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002011  00000000  00000000  000031ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000051bd  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ed       	ldi	r30, 0xDE	; 222
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 3b       	cpi	r26, 0xBE	; 190
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae eb       	ldi	r26, 0xBE	; 190
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 3d       	cpi	r26, 0xDB	; 219
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <main>
  9e:	0c 94 ed 07 	jmp	0xfda	; 0xfda <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z4initv>:
#include "uart0.h"
#include "twi.h"

void init()
{
	uart0_init();
  a6:	0e 94 5f 00 	call	0xbe	; 0xbe <uart0_init>
	stdout = uart0_fd();
  aa:	0e 94 76 01 	call	0x2ec	; 0x2ec <uart0_fd>
  ae:	90 93 d4 01 	sts	0x01D4, r25
  b2:	80 93 d3 01 	sts	0x01D3, r24

	twi_init();
  b6:	0e 94 8b 01 	call	0x316	; 0x316 <twi_init>
	ccs811_init();
  ba:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <ccs811_init>

000000be <uart0_init>:
void uart0_init()
{
	// UART 0 initialisation
	#define BAUD	UART0_BAUD
	#include <util/setbaud.h>
	UBRR0H = UBRRH_VALUE;
  be:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE;
  c2:	8c e0       	ldi	r24, 0x0C	; 12
  c4:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A = USE_2X << U2X0;
  c8:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);
  cc:	88 e1       	ldi	r24, 0x18	; 24
  ce:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
  d2:	86 e0       	ldi	r24, 0x06	; 6
  d4:	80 93 c2 00 	sts	0x00C2, r24
  d8:	08 95       	ret

000000da <uart0_read_unblocked>:

// Return file descriptor
FILE *uart0_fd();

// If characters available for read
static inline uint8_t uart0_available() {return UCSR0A & _BV(RXC0);}
  da:	80 91 c0 00 	lds	r24, 0x00C0
}

int uart0_read_unblocked()
{
	if (!uart0_available())
  de:	87 ff       	sbrs	r24, 7
  e0:	04 c0       	rjmp	.+8      	; 0xea <uart0_read_unblocked+0x10>
		return -1;
	return UDR0;
  e2:	80 91 c6 00 	lds	r24, 0x00C6
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	08 95       	ret
}

int uart0_read_unblocked()
{
	if (!uart0_available())
		return -1;
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	9f ef       	ldi	r25, 0xFF	; 255
	return UDR0;
}
  ee:	08 95       	ret

000000f0 <uart0_read>:
  f0:	80 91 c0 00 	lds	r24, 0x00C0

// Read 1 character, blocking
char uart0_read()
{
	while (!uart0_available());
  f4:	87 ff       	sbrs	r24, 7
  f6:	fc cf       	rjmp	.-8      	; 0xf0 <uart0_read>
	return UDR0;
  f8:	80 91 c6 00 	lds	r24, 0x00C6
}
  fc:	08 95       	ret

000000fe <getch>:
}

// For fdevopen
static int getch(FILE *stream)
{
	return uart0_read();
  fe:	0e 94 78 00 	call	0xf0	; 0xf0 <uart0_read>
}
 102:	99 27       	eor	r25, r25
 104:	87 fd       	sbrc	r24, 7
 106:	90 95       	com	r25
 108:	08 95       	ret

0000010a <uart0_read_data>:
	while (!uart0_available());
	return UDR0;
}

void uart0_read_data(char *ptr, unsigned long length)
{
 10a:	cf 92       	push	r12
 10c:	df 92       	push	r13
 10e:	ef 92       	push	r14
 110:	ff 92       	push	r15
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	ec 01       	movw	r28, r24
	while (length--)
 118:	6a 01       	movw	r12, r20
 11a:	7b 01       	movw	r14, r22
 11c:	c1 14       	cp	r12, r1
 11e:	d1 04       	cpc	r13, r1
 120:	e1 04       	cpc	r14, r1
 122:	f1 04       	cpc	r15, r1
 124:	49 f0       	breq	.+18     	; 0x138 <uart0_read_data+0x2e>
		*ptr++ = uart0_read();
 126:	0e 94 78 00 	call	0xf0	; 0xf0 <uart0_read>
 12a:	89 93       	st	Y+, r24
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	c8 1a       	sub	r12, r24
 130:	d1 08       	sbc	r13, r1
 132:	e1 08       	sbc	r14, r1
 134:	f1 08       	sbc	r15, r1
 136:	f2 cf       	rjmp	.-28     	; 0x11c <uart0_read_data+0x12>
}
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	ff 90       	pop	r15
 13e:	ef 90       	pop	r14
 140:	df 90       	pop	r13
 142:	cf 90       	pop	r12
 144:	08 95       	ret

00000146 <uart0_write_unblocked>:

// If UART tx buffer is available
static inline uint8_t uart0_ready() {return UCSR0A & _BV(UDRE0);}
 146:	90 91 c0 00 	lds	r25, 0x00C0

int uart0_write_unblocked(const char data)
{
	if (!uart0_ready())
 14a:	95 ff       	sbrs	r25, 5
 14c:	06 c0       	rjmp	.+12     	; 0x15a <uart0_write_unblocked+0x14>
		return -1;
	UDR0 = data;
 14e:	80 93 c6 00 	sts	0x00C6, r24
	return data;
 152:	99 27       	eor	r25, r25
 154:	87 fd       	sbrc	r24, 7
 156:	90 95       	com	r25
 158:	08 95       	ret
}

int uart0_write_unblocked(const char data)
{
	if (!uart0_ready())
		return -1;
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	9f ef       	ldi	r25, 0xFF	; 255
	UDR0 = data;
	return data;
}
 15e:	08 95       	ret

00000160 <uart0_write>:
 160:	90 91 c0 00 	lds	r25, 0x00C0

void uart0_write(const char data)
{
	while (!uart0_ready());
 164:	95 ff       	sbrs	r25, 5
 166:	fc cf       	rjmp	.-8      	; 0x160 <uart0_write>
	UDR0 = data;
 168:	80 93 c6 00 	sts	0x00C6, r24
 16c:	08 95       	ret

0000016e <putch>:
	goto loop;
}

// For fdevopen
static int putch(char ch, FILE *stream)
{
 16e:	cf 93       	push	r28
 170:	c8 2f       	mov	r28, r24
	if (ch == '\n')
 172:	8a 30       	cpi	r24, 0x0A	; 10
 174:	19 f4       	brne	.+6      	; 0x17c <putch+0xe>
		putch('\r', stream);
 176:	8d e0       	ldi	r24, 0x0D	; 13
 178:	0e 94 b7 00 	call	0x16e	; 0x16e <putch>
	uart0_write(ch);
 17c:	8c 2f       	mov	r24, r28
 17e:	0e 94 b0 00 	call	0x160	; 0x160 <uart0_write>
	return ch;
}
 182:	8c 2f       	mov	r24, r28
 184:	99 27       	eor	r25, r25
 186:	87 fd       	sbrc	r24, 7
 188:	90 95       	com	r25
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret

0000018e <uart0_write_data>:
	while (!uart0_ready());
	UDR0 = data;
}

void uart0_write_data(const char *ptr, unsigned long length)
{
 18e:	cf 92       	push	r12
 190:	df 92       	push	r13
 192:	ef 92       	push	r14
 194:	ff 92       	push	r15
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	ec 01       	movw	r28, r24
	while (length--)
 19c:	6a 01       	movw	r12, r20
 19e:	7b 01       	movw	r14, r22
 1a0:	c1 14       	cp	r12, r1
 1a2:	d1 04       	cpc	r13, r1
 1a4:	e1 04       	cpc	r14, r1
 1a6:	f1 04       	cpc	r15, r1
 1a8:	49 f0       	breq	.+18     	; 0x1bc <uart0_write_data+0x2e>
		uart0_write(*ptr++);
 1aa:	89 91       	ld	r24, Y+
 1ac:	0e 94 b0 00 	call	0x160	; 0x160 <uart0_write>
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	c8 1a       	sub	r12, r24
 1b4:	d1 08       	sbc	r13, r1
 1b6:	e1 08       	sbc	r14, r1
 1b8:	f1 08       	sbc	r15, r1
 1ba:	f2 cf       	rjmp	.-28     	; 0x1a0 <uart0_write_data+0x12>
}
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	ff 90       	pop	r15
 1c2:	ef 90       	pop	r14
 1c4:	df 90       	pop	r13
 1c6:	cf 90       	pop	r12
 1c8:	08 95       	ret

000001ca <uart0_write_string>:

void uart0_write_string(const char *str)
{
 1ca:	0f 93       	push	r16
 1cc:	1f 93       	push	r17
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	ec 01       	movw	r28, r24
 1d4:	8e 01       	movw	r16, r28
	while (*str != '\0') {
 1d6:	88 81       	ld	r24, Y
 1d8:	88 23       	and	r24, r24
 1da:	59 f0       	breq	.+22     	; 0x1f2 <uart0_write_string+0x28>
		if (*str == '\n')
 1dc:	8a 30       	cpi	r24, 0x0A	; 10
 1de:	19 f4       	brne	.+6      	; 0x1e6 <uart0_write_string+0x1c>
			uart0_write('\r');
 1e0:	8d e0       	ldi	r24, 0x0D	; 13
 1e2:	0e 94 b0 00 	call	0x160	; 0x160 <uart0_write>
 1e6:	21 96       	adiw	r28, 0x01	; 1
		uart0_write(*str++);
 1e8:	f8 01       	movw	r30, r16
 1ea:	80 81       	ld	r24, Z
 1ec:	0e 94 b0 00 	call	0x160	; 0x160 <uart0_write>
 1f0:	f1 cf       	rjmp	.-30     	; 0x1d4 <uart0_write_string+0xa>
	}
}
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	1f 91       	pop	r17
 1f8:	0f 91       	pop	r16
 1fa:	08 95       	ret

000001fc <uart0_readline>:

unsigned long uart0_readline(char *buffer, unsigned long length)
{
 1fc:	af 92       	push	r10
 1fe:	bf 92       	push	r11
 200:	cf 92       	push	r12
 202:	df 92       	push	r13
 204:	ef 92       	push	r14
 206:	ff 92       	push	r15
 208:	1f 93       	push	r17
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
 20e:	00 d0       	rcall	.+0      	; 0x210 <uart0_readline+0x14>
 210:	00 d0       	rcall	.+0      	; 0x212 <uart0_readline+0x16>
 212:	cd b7       	in	r28, 0x3d	; 61
 214:	de b7       	in	r29, 0x3e	; 62
 216:	5c 01       	movw	r10, r24
	unsigned long cnt = 0;
	long c;
	length--;
 218:	41 50       	subi	r20, 0x01	; 1
 21a:	51 09       	sbc	r21, r1
 21c:	61 09       	sbc	r22, r1
 21e:	71 09       	sbc	r23, r1
	}
}

unsigned long uart0_readline(char *buffer, unsigned long length)
{
	unsigned long cnt = 0;
 220:	c1 2c       	mov	r12, r1
 222:	d1 2c       	mov	r13, r1
 224:	76 01       	movw	r14, r12
	long c;
	length--;

loop:
	switch (c = uart0_read()) {
 226:	49 83       	std	Y+1, r20	; 0x01
 228:	5a 83       	std	Y+2, r21	; 0x02
 22a:	6b 83       	std	Y+3, r22	; 0x03
 22c:	7c 83       	std	Y+4, r23	; 0x04
 22e:	0e 94 78 00 	call	0xf0	; 0xf0 <uart0_read>
 232:	18 2f       	mov	r17, r24
 234:	49 81       	ldd	r20, Y+1	; 0x01
 236:	5a 81       	ldd	r21, Y+2	; 0x02
 238:	6b 81       	ldd	r22, Y+3	; 0x03
 23a:	7c 81       	ldd	r23, Y+4	; 0x04
 23c:	8d 30       	cpi	r24, 0x0D	; 13
 23e:	f1 f1       	breq	.+124    	; 0x2bc <uart0_readline+0xc0>
 240:	8f 37       	cpi	r24, 0x7F	; 127
 242:	19 f0       	breq	.+6      	; 0x24a <uart0_readline+0x4e>
 244:	8a 30       	cpi	r24, 0x0A	; 10
 246:	b1 f4       	brne	.+44     	; 0x274 <uart0_readline+0x78>
 248:	39 c0       	rjmp	.+114    	; 0x2bc <uart0_readline+0xc0>
		uart0_write('\r');
		uart0_write('\n');
		*buffer = '\0';
		return cnt;
	case '\x7f':	// Backspace
		if (cnt) {
 24a:	c1 14       	cp	r12, r1
 24c:	d1 04       	cpc	r13, r1
 24e:	e1 04       	cpc	r14, r1
 250:	f1 04       	cpc	r15, r1
 252:	49 f3       	breq	.-46     	; 0x226 <uart0_readline+0x2a>
			uart0_write(c);
 254:	8f e7       	ldi	r24, 0x7F	; 127
 256:	49 83       	std	Y+1, r20	; 0x01
 258:	5a 83       	std	Y+2, r21	; 0x02
 25a:	6b 83       	std	Y+3, r22	; 0x03
 25c:	7c 83       	std	Y+4, r23	; 0x04
 25e:	0e 94 b0 00 	call	0x160	; 0x160 <uart0_write>
			buffer--;
 262:	f1 e0       	ldi	r31, 0x01	; 1
 264:	af 1a       	sub	r10, r31
 266:	b1 08       	sbc	r11, r1
			cnt--;
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	c8 1a       	sub	r12, r24
 26c:	d1 08       	sbc	r13, r1
 26e:	e1 08       	sbc	r14, r1
 270:	f1 08       	sbc	r15, r1
 272:	1f c0       	rjmp	.+62     	; 0x2b2 <uart0_readline+0xb6>
		}
		break;
	default:
		if (!isprint(c) || cnt == length)
 274:	99 27       	eor	r25, r25
 276:	87 fd       	sbrc	r24, 7
 278:	90 95       	com	r25
 27a:	49 83       	std	Y+1, r20	; 0x01
 27c:	5a 83       	std	Y+2, r21	; 0x02
 27e:	6b 83       	std	Y+3, r22	; 0x03
 280:	7c 83       	std	Y+4, r23	; 0x04
 282:	0e 94 5f 03 	call	0x6be	; 0x6be <isprint>
 286:	49 81       	ldd	r20, Y+1	; 0x01
 288:	5a 81       	ldd	r21, Y+2	; 0x02
 28a:	6b 81       	ldd	r22, Y+3	; 0x03
 28c:	7c 81       	ldd	r23, Y+4	; 0x04
 28e:	89 2b       	or	r24, r25
 290:	51 f2       	breq	.-108    	; 0x226 <uart0_readline+0x2a>
 292:	c4 16       	cp	r12, r20
 294:	d5 06       	cpc	r13, r21
 296:	e6 06       	cpc	r14, r22
 298:	f7 06       	cpc	r15, r23
 29a:	29 f2       	breq	.-118    	; 0x226 <uart0_readline+0x2a>
			break;
		uart0_write(c);
 29c:	81 2f       	mov	r24, r17
 29e:	0e 94 b0 00 	call	0x160	; 0x160 <uart0_write>
		*buffer = c;
 2a2:	f5 01       	movw	r30, r10
 2a4:	11 93       	st	Z+, r17
 2a6:	5f 01       	movw	r10, r30
		buffer++;
		cnt++;
 2a8:	ff ef       	ldi	r31, 0xFF	; 255
 2aa:	cf 1a       	sub	r12, r31
 2ac:	df 0a       	sbc	r13, r31
 2ae:	ef 0a       	sbc	r14, r31
 2b0:	ff 0a       	sbc	r15, r31
 2b2:	49 81       	ldd	r20, Y+1	; 0x01
 2b4:	5a 81       	ldd	r21, Y+2	; 0x02
 2b6:	6b 81       	ldd	r22, Y+3	; 0x03
 2b8:	7c 81       	ldd	r23, Y+4	; 0x04
 2ba:	b5 cf       	rjmp	.-150    	; 0x226 <uart0_readline+0x2a>

loop:
	switch (c = uart0_read()) {
	case '\n':
	case '\r':
		uart0_write('\r');
 2bc:	8d e0       	ldi	r24, 0x0D	; 13
 2be:	0e 94 b0 00 	call	0x160	; 0x160 <uart0_write>
		uart0_write('\n');
 2c2:	8a e0       	ldi	r24, 0x0A	; 10
 2c4:	0e 94 b0 00 	call	0x160	; 0x160 <uart0_write>
		*buffer = '\0';
 2c8:	f5 01       	movw	r30, r10
 2ca:	10 82       	st	Z, r1
		buffer++;
		cnt++;
	}

	goto loop;
}
 2cc:	c7 01       	movw	r24, r14
 2ce:	b6 01       	movw	r22, r12
 2d0:	0f 90       	pop	r0
 2d2:	0f 90       	pop	r0
 2d4:	0f 90       	pop	r0
 2d6:	0f 90       	pop	r0
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	1f 91       	pop	r17
 2de:	ff 90       	pop	r15
 2e0:	ef 90       	pop	r14
 2e2:	df 90       	pop	r13
 2e4:	cf 90       	pop	r12
 2e6:	bf 90       	pop	r11
 2e8:	af 90       	pop	r10
 2ea:	08 95       	ret

000002ec <uart0_fd>:
}

FILE *uart0_fd()
{
	static FILE *dev = NULL;
	if (dev == NULL)
 2ec:	80 91 c6 01 	lds	r24, 0x01C6
 2f0:	90 91 c7 01 	lds	r25, 0x01C7
 2f4:	89 2b       	or	r24, r25
 2f6:	51 f4       	brne	.+20     	; 0x30c <uart0_fd+0x20>
		dev = fdevopen(putch, getch);
 2f8:	6f e7       	ldi	r22, 0x7F	; 127
 2fa:	70 e0       	ldi	r23, 0x00	; 0
 2fc:	87 eb       	ldi	r24, 0xB7	; 183
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 65 03 	call	0x6ca	; 0x6ca <fdevopen>
 304:	90 93 c7 01 	sts	0x01C7, r25
 308:	80 93 c6 01 	sts	0x01C6, r24
	return dev;
}
 30c:	80 91 c6 01 	lds	r24, 0x01C6
 310:	90 91 c7 01 	lds	r25, 0x01C7
 314:	08 95       	ret

00000316 <twi_init>:
#endif

void twi_init()
{
	//PORTC |= _BV(0) | _BV(1);
	TWBR = (F_CPU / TWI_BAUD - 16) / 2 / 1;
 316:	82 e0       	ldi	r24, 0x02	; 2
 318:	80 93 b8 00 	sts	0x00B8, r24
	TWSR = 0;
 31c:	10 92 b9 00 	sts	0x00B9, r1
 320:	08 95       	ret

00000322 <twi_start>:
}

void twi_start()
{
	dbg(__func__);
	TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
 322:	84 ea       	ldi	r24, 0xA4	; 164
 324:	80 93 bc 00 	sts	0x00BC, r24
	TWSR = 0;
}

static inline uint8_t twi_ready()
{
	return TWCR & _BV(TWINT);
 328:	80 91 bc 00 	lds	r24, 0x00BC

void twi_start()
{
	dbg(__func__);
	TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
	while (!twi_ready());
 32c:	87 ff       	sbrs	r24, 7
 32e:	fc cf       	rjmp	.-8      	; 0x328 <twi_start+0x6>
}
 330:	08 95       	ret

00000332 <twi_stop>:

void twi_stop()
{
	dbg(__func__);
	TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 332:	84 e9       	ldi	r24, 0x94	; 148
 334:	80 93 bc 00 	sts	0x00BC, r24
	while (TWCR & _BV(TWSTO));
 338:	80 91 bc 00 	lds	r24, 0x00BC
 33c:	84 fd       	sbrc	r24, 4
 33e:	fc cf       	rjmp	.-8      	; 0x338 <twi_stop+0x6>
}
 340:	08 95       	ret

00000342 <twi_report>:

#include <stdio.h>
void twi_report()
{
	printf("%s: %02x\n", __func__, TWSR);
 342:	80 91 b9 00 	lds	r24, 0x00B9
 346:	1f 92       	push	r1
 348:	8f 93       	push	r24
 34a:	86 e0       	ldi	r24, 0x06	; 6
 34c:	91 e0       	ldi	r25, 0x01	; 1
 34e:	9f 93       	push	r25
 350:	8f 93       	push	r24
 352:	88 e5       	ldi	r24, 0x58	; 88
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	9f 93       	push	r25
 358:	8f 93       	push	r24
 35a:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <printf>
 35e:	0f 90       	pop	r0
 360:	0f 90       	pop	r0
 362:	0f 90       	pop	r0
 364:	0f 90       	pop	r0
 366:	0f 90       	pop	r0
 368:	0f 90       	pop	r0
 36a:	08 95       	ret

0000036c <twi_write>:
}

uint8_t twi_write(uint8_t data)
{
	dbg(__func__);
	TWDR = data;
 36c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = _BV(TWINT) | _BV(TWEN);
 370:	84 e8       	ldi	r24, 0x84	; 132
 372:	80 93 bc 00 	sts	0x00BC, r24
	TWSR = 0;
}

static inline uint8_t twi_ready()
{
	return TWCR & _BV(TWINT);
 376:	80 91 bc 00 	lds	r24, 0x00BC
uint8_t twi_write(uint8_t data)
{
	dbg(__func__);
	TWDR = data;
	TWCR = _BV(TWINT) | _BV(TWEN);
	while (!twi_ready());
 37a:	87 ff       	sbrs	r24, 7
 37c:	fc cf       	rjmp	.-8      	; 0x376 <twi_write+0xa>
	uint8_t s = TWSR & 0xf8;
 37e:	90 91 b9 00 	lds	r25, 0x00B9
 382:	98 7f       	andi	r25, 0xF8	; 248
	return s == 0x40 || s == 0x18 || s == 0x28;
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 34       	cpi	r25, 0x40	; 64
 388:	31 f0       	breq	.+12     	; 0x396 <twi_write+0x2a>
 38a:	98 31       	cpi	r25, 0x18	; 24
 38c:	29 f0       	breq	.+10     	; 0x398 <twi_write+0x2c>
 38e:	98 32       	cpi	r25, 0x28	; 40
 390:	19 f0       	breq	.+6      	; 0x398 <twi_write+0x2c>
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	08 95       	ret
 396:	08 95       	ret
}
 398:	08 95       	ret

0000039a <twi_read>:

uint8_t twi_read(uint8_t ack)
{
	dbg(__func__);
	TWCR = _BV(TWINT) | (ack ? _BV(TWEA) : 0) | _BV(TWEN);
 39a:	88 23       	and	r24, r24
 39c:	11 f0       	breq	.+4      	; 0x3a2 <twi_read+0x8>
 39e:	84 ec       	ldi	r24, 0xC4	; 196
 3a0:	01 c0       	rjmp	.+2      	; 0x3a4 <twi_read+0xa>
 3a2:	84 e8       	ldi	r24, 0x84	; 132
 3a4:	80 93 bc 00 	sts	0x00BC, r24
	TWSR = 0;
}

static inline uint8_t twi_ready()
{
	return TWCR & _BV(TWINT);
 3a8:	80 91 bc 00 	lds	r24, 0x00BC

uint8_t twi_read(uint8_t ack)
{
	dbg(__func__);
	TWCR = _BV(TWINT) | (ack ? _BV(TWEA) : 0) | _BV(TWEN);
	while (!twi_ready());
 3ac:	87 ff       	sbrs	r24, 7
 3ae:	fc cf       	rjmp	.-8      	; 0x3a8 <twi_read+0xe>
	return TWDR;
 3b0:	80 91 bb 00 	lds	r24, 0x00BB
}
 3b4:	08 95       	ret

000003b6 <twi_scan>:

uint8_t twi_scan(uint8_t addr)
{
 3b6:	cf 93       	push	r28
 3b8:	df 93       	push	r29
 3ba:	1f 92       	push	r1
 3bc:	cd b7       	in	r28, 0x3d	; 61
 3be:	de b7       	in	r29, 0x3e	; 62
	dbg(__func__);
	twi_start();
 3c0:	89 83       	std	Y+1, r24	; 0x01
 3c2:	0e 94 91 01 	call	0x322	; 0x322 <twi_start>
	uint8_t ack = twi_write(addr);
 3c6:	89 81       	ldd	r24, Y+1	; 0x01
 3c8:	0e 94 b6 01 	call	0x36c	; 0x36c <twi_write>
	twi_stop();
 3cc:	89 83       	std	Y+1, r24	; 0x01
 3ce:	0e 94 99 01 	call	0x332	; 0x332 <twi_stop>
	return ack;
}
 3d2:	89 81       	ldd	r24, Y+1	; 0x01
 3d4:	0f 90       	pop	r0
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	08 95       	ret

000003dc <ccs811_init>:

static uint8_t err;

#include <stdio.h>
void ccs811_init()
{
 3dc:	08 95       	ret

000003de <ccs811_error>:
}

uint8_t ccs811_error()
{
	return err;
}
 3de:	80 91 d0 01 	lds	r24, 0x01D0
 3e2:	08 95       	ret

000003e4 <ccs811_read>:

uint8_t ccs811_read(uint8_t addr)
{
 3e4:	0f 93       	push	r16
 3e6:	1f 93       	push	r17
 3e8:	cf 93       	push	r28
 3ea:	df 93       	push	r29
 3ec:	1f 92       	push	r1
 3ee:	cd b7       	in	r28, 0x3d	; 61
 3f0:	de b7       	in	r29, 0x3e	; 62
 3f2:	08 2f       	mov	r16, r24
	err = 0;
 3f4:	10 92 d0 01 	sts	0x01D0, r1
	twi_start();
 3f8:	0e 94 91 01 	call	0x322	; 0x322 <twi_start>
	err += !twi_write(I2C_WRITE);
 3fc:	10 91 d0 01 	lds	r17, 0x01D0
 400:	84 eb       	ldi	r24, 0xB4	; 180
 402:	0e 94 b6 01 	call	0x36c	; 0x36c <twi_write>
 406:	91 e0       	ldi	r25, 0x01	; 1
 408:	81 11       	cpse	r24, r1
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	19 0f       	add	r17, r25
 40e:	10 93 d0 01 	sts	0x01D0, r17
	err += !twi_write(addr);
 412:	80 2f       	mov	r24, r16
 414:	0e 94 b6 01 	call	0x36c	; 0x36c <twi_write>
 418:	91 e0       	ldi	r25, 0x01	; 1
 41a:	81 11       	cpse	r24, r1
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	91 0f       	add	r25, r17
 420:	90 93 d0 01 	sts	0x01D0, r25

	// Repeated start
	twi_start();
 424:	0e 94 91 01 	call	0x322	; 0x322 <twi_start>
	err += !twi_write(I2C_READ);
 428:	10 91 d0 01 	lds	r17, 0x01D0
 42c:	85 eb       	ldi	r24, 0xB5	; 181
 42e:	0e 94 b6 01 	call	0x36c	; 0x36c <twi_write>
 432:	91 e0       	ldi	r25, 0x01	; 1
 434:	81 11       	cpse	r24, r1
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	91 0f       	add	r25, r17
 43a:	90 93 d0 01 	sts	0x01D0, r25
	if (err) {
 43e:	99 23       	and	r25, r25
 440:	19 f0       	breq	.+6      	; 0x448 <ccs811_read+0x64>
		twi_stop();
 442:	0e 94 99 01 	call	0x332	; 0x332 <twi_stop>
 446:	0a c0       	rjmp	.+20     	; 0x45c <ccs811_read+0x78>
		return 0;
	}
	uint8_t data = twi_read(1);
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	0e 94 cd 01 	call	0x39a	; 0x39a <twi_read>
	twi_stop();
 44e:	89 83       	std	Y+1, r24	; 0x01
 450:	0e 94 99 01 	call	0x332	; 0x332 <twi_stop>
	return err ? 0 : data;
 454:	90 91 d0 01 	lds	r25, 0x01D0
 458:	89 81       	ldd	r24, Y+1	; 0x01
 45a:	91 11       	cpse	r25, r1
 45c:	80 e0       	ldi	r24, 0x00	; 0
}
 45e:	0f 90       	pop	r0
 460:	df 91       	pop	r29
 462:	cf 91       	pop	r28
 464:	1f 91       	pop	r17
 466:	0f 91       	pop	r16
 468:	08 95       	ret

0000046a <ccs811_read_multi>:

uint8_t ccs811_read_multi(uint8_t addr, uint8_t len, uint8_t *ptr)
{
 46a:	ff 92       	push	r15
 46c:	0f 93       	push	r16
 46e:	1f 93       	push	r17
 470:	cf 93       	push	r28
 472:	df 93       	push	r29
 474:	d8 2f       	mov	r29, r24
 476:	16 2f       	mov	r17, r22
 478:	f4 2e       	mov	r15, r20
 47a:	05 2f       	mov	r16, r21
	err = 0;
 47c:	10 92 d0 01 	sts	0x01D0, r1
	twi_start();
 480:	0e 94 91 01 	call	0x322	; 0x322 <twi_start>
	err += !twi_write(I2C_WRITE);
 484:	c0 91 d0 01 	lds	r28, 0x01D0
 488:	84 eb       	ldi	r24, 0xB4	; 180
 48a:	0e 94 b6 01 	call	0x36c	; 0x36c <twi_write>
 48e:	91 e0       	ldi	r25, 0x01	; 1
 490:	81 11       	cpse	r24, r1
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	c9 0f       	add	r28, r25
 496:	c0 93 d0 01 	sts	0x01D0, r28
	err += !twi_write(addr);
 49a:	8d 2f       	mov	r24, r29
 49c:	0e 94 b6 01 	call	0x36c	; 0x36c <twi_write>
 4a0:	91 e0       	ldi	r25, 0x01	; 1
 4a2:	81 11       	cpse	r24, r1
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	c9 0f       	add	r28, r25
 4a8:	c0 93 d0 01 	sts	0x01D0, r28

	// Repeated start
	twi_start();
 4ac:	0e 94 91 01 	call	0x322	; 0x322 <twi_start>
	err += !twi_write(I2C_READ);
 4b0:	c0 91 d0 01 	lds	r28, 0x01D0
 4b4:	85 eb       	ldi	r24, 0xB5	; 181
 4b6:	0e 94 b6 01 	call	0x36c	; 0x36c <twi_write>
 4ba:	91 e0       	ldi	r25, 0x01	; 1
 4bc:	81 11       	cpse	r24, r1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	9c 0f       	add	r25, r28
 4c2:	90 93 d0 01 	sts	0x01D0, r25
	if (err) {
 4c6:	91 11       	cpse	r25, r1
 4c8:	0b c0       	rjmp	.+22     	; 0x4e0 <ccs811_read_multi+0x76>
 4ca:	11 50       	subi	r17, 0x01	; 1
 4cc:	cf 2d       	mov	r28, r15
 4ce:	d0 2f       	mov	r29, r16
		twi_stop();
		return err;
	}

	while (len--)
 4d0:	1f 3f       	cpi	r17, 0xFF	; 255
 4d2:	31 f0       	breq	.+12     	; 0x4e0 <ccs811_read_multi+0x76>
		*ptr++ = twi_read(len);
 4d4:	81 2f       	mov	r24, r17
 4d6:	0e 94 cd 01 	call	0x39a	; 0x39a <twi_read>
 4da:	89 93       	st	Y+, r24
 4dc:	11 50       	subi	r17, 0x01	; 1
 4de:	f8 cf       	rjmp	.-16     	; 0x4d0 <ccs811_read_multi+0x66>
	twi_stop();
 4e0:	0e 94 99 01 	call	0x332	; 0x332 <twi_stop>
	return err;
 4e4:	80 91 d0 01 	lds	r24, 0x01D0
}
 4e8:	df 91       	pop	r29
 4ea:	cf 91       	pop	r28
 4ec:	1f 91       	pop	r17
 4ee:	0f 91       	pop	r16
 4f0:	ff 90       	pop	r15
 4f2:	08 95       	ret

000004f4 <ccs811_read_status>:

uint8_t ccs811_read_status()
{
	return ccs811_read(STATUS_REG);
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <ccs811_read>

000004fa <ccs811_read_mode>:
}

uint8_t ccs811_read_mode()
{
	return ccs811_read(MEAS_MODE_REG);
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <ccs811_read>

00000500 <ccs811_poll>:
}

uint8_t ccs811_poll()
{
	return ccs811_read_status() & CCS811_DATA_READY;
 500:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <ccs811_read_status>
}
 504:	88 70       	andi	r24, 0x08	; 8
 506:	08 95       	ret

00000508 <ccs811_read_data>:
{
	return ((data & 0xff) << 8) | ((data >> 8) & 0xff);
}

void ccs811_read_data(struct ccs811_data_t *ptr)
{
 508:	cf 93       	push	r28
 50a:	df 93       	push	r29
 50c:	ec 01       	movw	r28, r24
	ccs811_read_multi(ALG_RESULT_DATA, sizeof(struct ccs811_data_t), (void *)ptr);
 50e:	ac 01       	movw	r20, r24
 510:	68 e0       	ldi	r22, 0x08	; 8
 512:	82 e0       	ldi	r24, 0x02	; 2
 514:	0e 94 35 02 	call	0x46a	; 0x46a <ccs811_read_multi>
	return ccs811_read_status() & CCS811_DATA_READY;
}

static inline uint16_t swap_u16(uint16_t data)
{
	return ((data & 0xff) << 8) | ((data >> 8) & 0xff);
 518:	88 81       	ld	r24, Y
 51a:	99 81       	ldd	r25, Y+1	; 0x01
 51c:	98 27       	eor	r25, r24
 51e:	89 27       	eor	r24, r25
 520:	98 27       	eor	r25, r24
}

void ccs811_read_data(struct ccs811_data_t *ptr)
{
	ccs811_read_multi(ALG_RESULT_DATA, sizeof(struct ccs811_data_t), (void *)ptr);
	ptr->eco2 = swap_u16(ptr->eco2);
 522:	99 83       	std	Y+1, r25	; 0x01
 524:	88 83       	st	Y, r24
	return ccs811_read_status() & CCS811_DATA_READY;
}

static inline uint16_t swap_u16(uint16_t data)
{
	return ((data & 0xff) << 8) | ((data >> 8) & 0xff);
 526:	8a 81       	ldd	r24, Y+2	; 0x02
 528:	9b 81       	ldd	r25, Y+3	; 0x03
 52a:	98 27       	eor	r25, r24
 52c:	89 27       	eor	r24, r25
 52e:	98 27       	eor	r25, r24

void ccs811_read_data(struct ccs811_data_t *ptr)
{
	ccs811_read_multi(ALG_RESULT_DATA, sizeof(struct ccs811_data_t), (void *)ptr);
	ptr->eco2 = swap_u16(ptr->eco2);
	ptr->tvoc = swap_u16(ptr->tvoc);
 530:	9b 83       	std	Y+3, r25	; 0x03
 532:	8a 83       	std	Y+2, r24	; 0x02
	return ccs811_read_status() & CCS811_DATA_READY;
}

static inline uint16_t swap_u16(uint16_t data)
{
	return ((data & 0xff) << 8) | ((data >> 8) & 0xff);
 534:	8e 81       	ldd	r24, Y+6	; 0x06
 536:	9f 81       	ldd	r25, Y+7	; 0x07
 538:	98 27       	eor	r25, r24
 53a:	89 27       	eor	r24, r25
 53c:	98 27       	eor	r25, r24
void ccs811_read_data(struct ccs811_data_t *ptr)
{
	ccs811_read_multi(ALG_RESULT_DATA, sizeof(struct ccs811_data_t), (void *)ptr);
	ptr->eco2 = swap_u16(ptr->eco2);
	ptr->tvoc = swap_u16(ptr->tvoc);
	ptr->raw = swap_u16(ptr->raw);
 53e:	9f 83       	std	Y+7, r25	; 0x07
 540:	8e 83       	std	Y+6, r24	; 0x06
}
 542:	df 91       	pop	r29
 544:	cf 91       	pop	r28
 546:	08 95       	ret

00000548 <ccs811_test>:
 548:	cf 93       	push	r28
 54a:	81 e1       	ldi	r24, 0x11	; 17
 54c:	91 e0       	ldi	r25, 0x01	; 1
 54e:	9f 93       	push	r25
 550:	8f 93       	push	r24
 552:	82 e6       	ldi	r24, 0x62	; 98
 554:	91 e0       	ldi	r25, 0x01	; 1
 556:	9f 93       	push	r25
 558:	8f 93       	push	r24
 55a:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <printf>
 55e:	c0 91 d0 01 	lds	r28, 0x01D0
 562:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <ccs811_read_status>
 566:	1f 92       	push	r1
 568:	cf 93       	push	r28
 56a:	1f 92       	push	r1
 56c:	8f 93       	push	r24
 56e:	82 e7       	ldi	r24, 0x72	; 114
 570:	91 e0       	ldi	r25, 0x01	; 1
 572:	9f 93       	push	r25
 574:	8f 93       	push	r24
 576:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <printf>
 57a:	c0 91 d0 01 	lds	r28, 0x01D0
 57e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <ccs811_read_mode>
 582:	1f 92       	push	r1
 584:	cf 93       	push	r28
 586:	1f 92       	push	r1
 588:	8f 93       	push	r24
 58a:	8f e8       	ldi	r24, 0x8F	; 143
 58c:	91 e0       	ldi	r25, 0x01	; 1
 58e:	9f 93       	push	r25
 590:	8f 93       	push	r24
 592:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <printf>
 596:	0e 94 80 02 	call	0x500	; 0x500 <ccs811_poll>
 59a:	2d b7       	in	r18, 0x3d	; 61
 59c:	3e b7       	in	r19, 0x3e	; 62
 59e:	20 5f       	subi	r18, 0xF0	; 240
 5a0:	3f 4f       	sbci	r19, 0xFF	; 255
 5a2:	0f b6       	in	r0, 0x3f	; 63
 5a4:	f8 94       	cli
 5a6:	3e bf       	out	0x3e, r19	; 62
 5a8:	0f be       	out	0x3f, r0	; 63
 5aa:	2d bf       	out	0x3d, r18	; 61
 5ac:	88 23       	and	r24, r24
 5ae:	91 f0       	breq	.+36     	; 0x5d4 <ccs811_test+0x8c>
 5b0:	88 ec       	ldi	r24, 0xC8	; 200
 5b2:	91 e0       	ldi	r25, 0x01	; 1
 5b4:	0e 94 84 02 	call	0x508	; 0x508 <ccs811_read_data>
 5b8:	80 91 d0 01 	lds	r24, 0x01D0
 5bc:	1f 92       	push	r1
 5be:	8f 93       	push	r24
 5c0:	89 ea       	ldi	r24, 0xA9	; 169
 5c2:	91 e0       	ldi	r25, 0x01	; 1
 5c4:	9f 93       	push	r25
 5c6:	8f 93       	push	r24
 5c8:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <printf>
 5cc:	0f 90       	pop	r0
 5ce:	0f 90       	pop	r0
 5d0:	0f 90       	pop	r0
 5d2:	0f 90       	pop	r0
 5d4:	cf 91       	pop	r28
 5d6:	08 95       	ret

000005d8 <main>:
}

int main()
{
	init();
 5d8:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z4initv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5dc:	2f ef       	ldi	r18, 0xFF	; 255
 5de:	83 ed       	ldi	r24, 0xD3	; 211
 5e0:	90 e3       	ldi	r25, 0x30	; 48
 5e2:	21 50       	subi	r18, 0x01	; 1
 5e4:	80 40       	sbci	r24, 0x00	; 0
 5e6:	90 40       	sbci	r25, 0x00	; 0
 5e8:	e1 f7       	brne	.-8      	; 0x5e2 <main+0xa>
 5ea:	00 c0       	rjmp	.+0      	; 0x5ec <main+0x14>
 5ec:	00 00       	nop

	_delay_ms(2000);
	puts("Hello, world!");
 5ee:	8d e1       	ldi	r24, 0x1D	; 29
 5f0:	91 e0       	ldi	r25, 0x01	; 1
 5f2:	0e 94 f6 03 	call	0x7ec	; 0x7ec <puts>
		static struct ccs811_data_t data;
		ccs811_read_data(&data);

		uint8_t err = ccs811_error();
		if (!err) {
			printf("eCO2: %u\n", data.eco2);
 5f6:	0b e2       	ldi	r16, 0x2B	; 43
 5f8:	11 e0       	ldi	r17, 0x01	; 1
			printf("TVOC: %u\n", data.tvoc);
 5fa:	85 e3       	ldi	r24, 0x35	; 53
 5fc:	e8 2e       	mov	r14, r24
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	f8 2e       	mov	r15, r24
			printf("status: 0x%02x\n", data.status);
 602:	9f e3       	ldi	r25, 0x3F	; 63
 604:	c9 2e       	mov	r12, r25
 606:	91 e0       	ldi	r25, 0x01	; 1
 608:	d9 2e       	mov	r13, r25

			uint8_t *ptr = (uint8_t *)&data;
			uint8_t i;
			for (i = sizeof(data); i != 0; i--)
				printf("0x%02x, ", *ptr++);
 60a:	2f e4       	ldi	r18, 0x4F	; 79
 60c:	a2 2e       	mov	r10, r18
 60e:	21 e0       	ldi	r18, 0x01	; 1
 610:	b2 2e       	mov	r11, r18
	_delay_ms(2000);
	puts("Hello, world!");

#if 1
loop:
	if (ccs811_poll()) {
 612:	0e 94 80 02 	call	0x500	; 0x500 <ccs811_poll>
 616:	88 23       	and	r24, r24
 618:	09 f4       	brne	.+2      	; 0x61c <main+0x44>
 61a:	45 c0       	rjmp	.+138    	; 0x6a6 <main+0xce>
		static struct ccs811_data_t data;
		ccs811_read_data(&data);
 61c:	8e eb       	ldi	r24, 0xBE	; 190
 61e:	91 e0       	ldi	r25, 0x01	; 1
 620:	0e 94 84 02 	call	0x508	; 0x508 <ccs811_read_data>

		uint8_t err = ccs811_error();
 624:	0e 94 ef 01 	call	0x3de	; 0x3de <ccs811_error>
		if (!err) {
 628:	81 11       	cpse	r24, r1
 62a:	3d c0       	rjmp	.+122    	; 0x6a6 <main+0xce>
			printf("eCO2: %u\n", data.eco2);
 62c:	80 91 bf 01 	lds	r24, 0x01BF
 630:	8f 93       	push	r24
 632:	80 91 be 01 	lds	r24, 0x01BE
 636:	8f 93       	push	r24
 638:	1f 93       	push	r17
 63a:	0f 93       	push	r16
 63c:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <printf>
			printf("TVOC: %u\n", data.tvoc);
 640:	80 91 c1 01 	lds	r24, 0x01C1
 644:	8f 93       	push	r24
 646:	80 91 c0 01 	lds	r24, 0x01C0
 64a:	8f 93       	push	r24
 64c:	ff 92       	push	r15
 64e:	ef 92       	push	r14
 650:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <printf>
			printf("status: 0x%02x\n", data.status);
 654:	80 91 c3 01 	lds	r24, 0x01C3
 658:	1f 92       	push	r1
 65a:	8f 93       	push	r24
 65c:	df 92       	push	r13
 65e:	cf 92       	push	r12
 660:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <printf>
 664:	ce eb       	ldi	r28, 0xBE	; 190
 666:	d1 e0       	ldi	r29, 0x01	; 1
 668:	8d b7       	in	r24, 0x3d	; 61
 66a:	9e b7       	in	r25, 0x3e	; 62
 66c:	0c 96       	adiw	r24, 0x0c	; 12
 66e:	0f b6       	in	r0, 0x3f	; 63
 670:	f8 94       	cli
 672:	9e bf       	out	0x3e, r25	; 62
 674:	0f be       	out	0x3f, r0	; 63
 676:	8d bf       	out	0x3d, r24	; 61

			uint8_t *ptr = (uint8_t *)&data;
			uint8_t i;
			for (i = sizeof(data); i != 0; i--)
				printf("0x%02x, ", *ptr++);
 678:	89 91       	ld	r24, Y+
 67a:	1f 92       	push	r1
 67c:	8f 93       	push	r24
 67e:	bf 92       	push	r11
 680:	af 92       	push	r10
 682:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <printf>
			printf("TVOC: %u\n", data.tvoc);
			printf("status: 0x%02x\n", data.status);

			uint8_t *ptr = (uint8_t *)&data;
			uint8_t i;
			for (i = sizeof(data); i != 0; i--)
 686:	0f 90       	pop	r0
 688:	0f 90       	pop	r0
 68a:	0f 90       	pop	r0
 68c:	0f 90       	pop	r0
 68e:	91 e0       	ldi	r25, 0x01	; 1
 690:	c6 3c       	cpi	r28, 0xC6	; 198
 692:	d9 07       	cpc	r29, r25
 694:	89 f7       	brne	.-30     	; 0x678 <main+0xa0>
				printf("0x%02x, ", *ptr++);
			putchar('\n');
 696:	60 91 d3 01 	lds	r22, 0x01D3
 69a:	70 91 d4 01 	lds	r23, 0x01D4
 69e:	8a e0       	ldi	r24, 0x0A	; 10
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	0e 94 b0 03 	call	0x760	; 0x760 <fputc>
 6a6:	2f ef       	ldi	r18, 0xFF	; 255
 6a8:	80 e7       	ldi	r24, 0x70	; 112
 6aa:	92 e0       	ldi	r25, 0x02	; 2
 6ac:	21 50       	subi	r18, 0x01	; 1
 6ae:	80 40       	sbci	r24, 0x00	; 0
 6b0:	90 40       	sbci	r25, 0x00	; 0
 6b2:	e1 f7       	brne	.-8      	; 0x6ac <main+0xd4>
 6b4:	00 c0       	rjmp	.+0      	; 0x6b6 <main+0xde>
 6b6:	00 00       	nop
 6b8:	ac cf       	rjmp	.-168    	; 0x612 <main+0x3a>

000006ba <isgraph>:
 6ba:	80 32       	cpi	r24, 0x20	; 32
 6bc:	09 f0       	breq	.+2      	; 0x6c0 <isprint+0x2>

000006be <isprint>:
 6be:	91 11       	cpse	r25, r1
 6c0:	d7 c3       	rjmp	.+1966   	; 0xe70 <__ctype_isfalse>
 6c2:	80 52       	subi	r24, 0x20	; 32
 6c4:	8f 55       	subi	r24, 0x5F	; 95
 6c6:	e0 f7       	brcc	.-8      	; 0x6c0 <isprint+0x2>
 6c8:	08 95       	ret

000006ca <fdevopen>:
 6ca:	0f 93       	push	r16
 6cc:	1f 93       	push	r17
 6ce:	cf 93       	push	r28
 6d0:	df 93       	push	r29
 6d2:	ec 01       	movw	r28, r24
 6d4:	8b 01       	movw	r16, r22
 6d6:	00 97       	sbiw	r24, 0x00	; 0
 6d8:	31 f4       	brne	.+12     	; 0x6e6 <fdevopen+0x1c>
 6da:	61 15       	cp	r22, r1
 6dc:	71 05       	cpc	r23, r1
 6de:	19 f4       	brne	.+6      	; 0x6e6 <fdevopen+0x1c>
 6e0:	80 e0       	ldi	r24, 0x00	; 0
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	38 c0       	rjmp	.+112    	; 0x756 <fdevopen+0x8c>
 6e6:	6e e0       	ldi	r22, 0x0E	; 14
 6e8:	70 e0       	ldi	r23, 0x00	; 0
 6ea:	81 e0       	ldi	r24, 0x01	; 1
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	0e 94 f5 05 	call	0xbea	; 0xbea <calloc>
 6f2:	fc 01       	movw	r30, r24
 6f4:	00 97       	sbiw	r24, 0x00	; 0
 6f6:	a1 f3       	breq	.-24     	; 0x6e0 <fdevopen+0x16>
 6f8:	80 e8       	ldi	r24, 0x80	; 128
 6fa:	83 83       	std	Z+3, r24	; 0x03
 6fc:	01 15       	cp	r16, r1
 6fe:	11 05       	cpc	r17, r1
 700:	71 f0       	breq	.+28     	; 0x71e <fdevopen+0x54>
 702:	13 87       	std	Z+11, r17	; 0x0b
 704:	02 87       	std	Z+10, r16	; 0x0a
 706:	81 e8       	ldi	r24, 0x81	; 129
 708:	83 83       	std	Z+3, r24	; 0x03
 70a:	80 91 d1 01 	lds	r24, 0x01D1
 70e:	90 91 d2 01 	lds	r25, 0x01D2
 712:	89 2b       	or	r24, r25
 714:	21 f4       	brne	.+8      	; 0x71e <fdevopen+0x54>
 716:	f0 93 d2 01 	sts	0x01D2, r31
 71a:	e0 93 d1 01 	sts	0x01D1, r30
 71e:	20 97       	sbiw	r28, 0x00	; 0
 720:	c9 f0       	breq	.+50     	; 0x754 <fdevopen+0x8a>
 722:	d1 87       	std	Z+9, r29	; 0x09
 724:	c0 87       	std	Z+8, r28	; 0x08
 726:	83 81       	ldd	r24, Z+3	; 0x03
 728:	82 60       	ori	r24, 0x02	; 2
 72a:	83 83       	std	Z+3, r24	; 0x03
 72c:	80 91 d3 01 	lds	r24, 0x01D3
 730:	90 91 d4 01 	lds	r25, 0x01D4
 734:	89 2b       	or	r24, r25
 736:	71 f4       	brne	.+28     	; 0x754 <fdevopen+0x8a>
 738:	f0 93 d4 01 	sts	0x01D4, r31
 73c:	e0 93 d3 01 	sts	0x01D3, r30
 740:	80 91 d5 01 	lds	r24, 0x01D5
 744:	90 91 d6 01 	lds	r25, 0x01D6
 748:	89 2b       	or	r24, r25
 74a:	21 f4       	brne	.+8      	; 0x754 <fdevopen+0x8a>
 74c:	f0 93 d6 01 	sts	0x01D6, r31
 750:	e0 93 d5 01 	sts	0x01D5, r30
 754:	cf 01       	movw	r24, r30
 756:	df 91       	pop	r29
 758:	cf 91       	pop	r28
 75a:	1f 91       	pop	r17
 75c:	0f 91       	pop	r16
 75e:	08 95       	ret

00000760 <fputc>:
 760:	0f 93       	push	r16
 762:	1f 93       	push	r17
 764:	cf 93       	push	r28
 766:	df 93       	push	r29
 768:	18 2f       	mov	r17, r24
 76a:	09 2f       	mov	r16, r25
 76c:	eb 01       	movw	r28, r22
 76e:	8b 81       	ldd	r24, Y+3	; 0x03
 770:	81 fd       	sbrc	r24, 1
 772:	03 c0       	rjmp	.+6      	; 0x77a <fputc+0x1a>
 774:	8f ef       	ldi	r24, 0xFF	; 255
 776:	9f ef       	ldi	r25, 0xFF	; 255
 778:	20 c0       	rjmp	.+64     	; 0x7ba <fputc+0x5a>
 77a:	82 ff       	sbrs	r24, 2
 77c:	10 c0       	rjmp	.+32     	; 0x79e <fputc+0x3e>
 77e:	4e 81       	ldd	r20, Y+6	; 0x06
 780:	5f 81       	ldd	r21, Y+7	; 0x07
 782:	2c 81       	ldd	r18, Y+4	; 0x04
 784:	3d 81       	ldd	r19, Y+5	; 0x05
 786:	42 17       	cp	r20, r18
 788:	53 07       	cpc	r21, r19
 78a:	7c f4       	brge	.+30     	; 0x7aa <fputc+0x4a>
 78c:	e8 81       	ld	r30, Y
 78e:	f9 81       	ldd	r31, Y+1	; 0x01
 790:	9f 01       	movw	r18, r30
 792:	2f 5f       	subi	r18, 0xFF	; 255
 794:	3f 4f       	sbci	r19, 0xFF	; 255
 796:	39 83       	std	Y+1, r19	; 0x01
 798:	28 83       	st	Y, r18
 79a:	10 83       	st	Z, r17
 79c:	06 c0       	rjmp	.+12     	; 0x7aa <fputc+0x4a>
 79e:	e8 85       	ldd	r30, Y+8	; 0x08
 7a0:	f9 85       	ldd	r31, Y+9	; 0x09
 7a2:	81 2f       	mov	r24, r17
 7a4:	09 95       	icall
 7a6:	89 2b       	or	r24, r25
 7a8:	29 f7       	brne	.-54     	; 0x774 <fputc+0x14>
 7aa:	2e 81       	ldd	r18, Y+6	; 0x06
 7ac:	3f 81       	ldd	r19, Y+7	; 0x07
 7ae:	2f 5f       	subi	r18, 0xFF	; 255
 7b0:	3f 4f       	sbci	r19, 0xFF	; 255
 7b2:	3f 83       	std	Y+7, r19	; 0x07
 7b4:	2e 83       	std	Y+6, r18	; 0x06
 7b6:	81 2f       	mov	r24, r17
 7b8:	90 2f       	mov	r25, r16
 7ba:	df 91       	pop	r29
 7bc:	cf 91       	pop	r28
 7be:	1f 91       	pop	r17
 7c0:	0f 91       	pop	r16
 7c2:	08 95       	ret

000007c4 <printf>:
 7c4:	a0 e0       	ldi	r26, 0x00	; 0
 7c6:	b0 e0       	ldi	r27, 0x00	; 0
 7c8:	e8 ee       	ldi	r30, 0xE8	; 232
 7ca:	f3 e0       	ldi	r31, 0x03	; 3
 7cc:	0c 94 c6 07 	jmp	0xf8c	; 0xf8c <__prologue_saves__+0x20>
 7d0:	fe 01       	movw	r30, r28
 7d2:	35 96       	adiw	r30, 0x05	; 5
 7d4:	61 91       	ld	r22, Z+
 7d6:	71 91       	ld	r23, Z+
 7d8:	af 01       	movw	r20, r30
 7da:	80 91 d3 01 	lds	r24, 0x01D3
 7de:	90 91 d4 01 	lds	r25, 0x01D4
 7e2:	0e 94 23 04 	call	0x846	; 0x846 <vfprintf>
 7e6:	e2 e0       	ldi	r30, 0x02	; 2
 7e8:	0c 94 e2 07 	jmp	0xfc4	; 0xfc4 <__epilogue_restores__+0x20>

000007ec <puts>:
 7ec:	0f 93       	push	r16
 7ee:	1f 93       	push	r17
 7f0:	cf 93       	push	r28
 7f2:	df 93       	push	r29
 7f4:	e0 91 d3 01 	lds	r30, 0x01D3
 7f8:	f0 91 d4 01 	lds	r31, 0x01D4
 7fc:	23 81       	ldd	r18, Z+3	; 0x03
 7fe:	21 ff       	sbrs	r18, 1
 800:	1b c0       	rjmp	.+54     	; 0x838 <puts+0x4c>
 802:	ec 01       	movw	r28, r24
 804:	00 e0       	ldi	r16, 0x00	; 0
 806:	10 e0       	ldi	r17, 0x00	; 0
 808:	89 91       	ld	r24, Y+
 80a:	60 91 d3 01 	lds	r22, 0x01D3
 80e:	70 91 d4 01 	lds	r23, 0x01D4
 812:	db 01       	movw	r26, r22
 814:	18 96       	adiw	r26, 0x08	; 8
 816:	ed 91       	ld	r30, X+
 818:	fc 91       	ld	r31, X
 81a:	19 97       	sbiw	r26, 0x09	; 9
 81c:	88 23       	and	r24, r24
 81e:	31 f0       	breq	.+12     	; 0x82c <puts+0x40>
 820:	09 95       	icall
 822:	89 2b       	or	r24, r25
 824:	89 f3       	breq	.-30     	; 0x808 <puts+0x1c>
 826:	0f ef       	ldi	r16, 0xFF	; 255
 828:	1f ef       	ldi	r17, 0xFF	; 255
 82a:	ee cf       	rjmp	.-36     	; 0x808 <puts+0x1c>
 82c:	8a e0       	ldi	r24, 0x0A	; 10
 82e:	09 95       	icall
 830:	89 2b       	or	r24, r25
 832:	11 f4       	brne	.+4      	; 0x838 <puts+0x4c>
 834:	c8 01       	movw	r24, r16
 836:	02 c0       	rjmp	.+4      	; 0x83c <puts+0x50>
 838:	8f ef       	ldi	r24, 0xFF	; 255
 83a:	9f ef       	ldi	r25, 0xFF	; 255
 83c:	df 91       	pop	r29
 83e:	cf 91       	pop	r28
 840:	1f 91       	pop	r17
 842:	0f 91       	pop	r16
 844:	08 95       	ret

00000846 <vfprintf>:
 846:	ac e0       	ldi	r26, 0x0C	; 12
 848:	b0 e0       	ldi	r27, 0x00	; 0
 84a:	e9 e2       	ldi	r30, 0x29	; 41
 84c:	f4 e0       	ldi	r31, 0x04	; 4
 84e:	0c 94 b6 07 	jmp	0xf6c	; 0xf6c <__prologue_saves__>
 852:	7c 01       	movw	r14, r24
 854:	6b 01       	movw	r12, r22
 856:	8a 01       	movw	r16, r20
 858:	fc 01       	movw	r30, r24
 85a:	17 82       	std	Z+7, r1	; 0x07
 85c:	16 82       	std	Z+6, r1	; 0x06
 85e:	83 81       	ldd	r24, Z+3	; 0x03
 860:	81 ff       	sbrs	r24, 1
 862:	bd c1       	rjmp	.+890    	; 0xbde <__stack+0x2df>
 864:	ce 01       	movw	r24, r28
 866:	01 96       	adiw	r24, 0x01	; 1
 868:	4c 01       	movw	r8, r24
 86a:	f7 01       	movw	r30, r14
 86c:	93 81       	ldd	r25, Z+3	; 0x03
 86e:	f6 01       	movw	r30, r12
 870:	93 fd       	sbrc	r25, 3
 872:	85 91       	lpm	r24, Z+
 874:	93 ff       	sbrs	r25, 3
 876:	81 91       	ld	r24, Z+
 878:	6f 01       	movw	r12, r30
 87a:	88 23       	and	r24, r24
 87c:	09 f4       	brne	.+2      	; 0x880 <vfprintf+0x3a>
 87e:	ab c1       	rjmp	.+854    	; 0xbd6 <__stack+0x2d7>
 880:	85 32       	cpi	r24, 0x25	; 37
 882:	39 f4       	brne	.+14     	; 0x892 <vfprintf+0x4c>
 884:	93 fd       	sbrc	r25, 3
 886:	85 91       	lpm	r24, Z+
 888:	93 ff       	sbrs	r25, 3
 88a:	81 91       	ld	r24, Z+
 88c:	6f 01       	movw	r12, r30
 88e:	85 32       	cpi	r24, 0x25	; 37
 890:	29 f4       	brne	.+10     	; 0x89c <vfprintf+0x56>
 892:	b7 01       	movw	r22, r14
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	0e 94 b0 03 	call	0x760	; 0x760 <fputc>
 89a:	e7 cf       	rjmp	.-50     	; 0x86a <vfprintf+0x24>
 89c:	51 2c       	mov	r5, r1
 89e:	31 2c       	mov	r3, r1
 8a0:	20 e0       	ldi	r18, 0x00	; 0
 8a2:	20 32       	cpi	r18, 0x20	; 32
 8a4:	a0 f4       	brcc	.+40     	; 0x8ce <vfprintf+0x88>
 8a6:	8b 32       	cpi	r24, 0x2B	; 43
 8a8:	69 f0       	breq	.+26     	; 0x8c4 <vfprintf+0x7e>
 8aa:	30 f4       	brcc	.+12     	; 0x8b8 <vfprintf+0x72>
 8ac:	80 32       	cpi	r24, 0x20	; 32
 8ae:	59 f0       	breq	.+22     	; 0x8c6 <vfprintf+0x80>
 8b0:	83 32       	cpi	r24, 0x23	; 35
 8b2:	69 f4       	brne	.+26     	; 0x8ce <vfprintf+0x88>
 8b4:	20 61       	ori	r18, 0x10	; 16
 8b6:	2c c0       	rjmp	.+88     	; 0x910 <__stack+0x11>
 8b8:	8d 32       	cpi	r24, 0x2D	; 45
 8ba:	39 f0       	breq	.+14     	; 0x8ca <vfprintf+0x84>
 8bc:	80 33       	cpi	r24, 0x30	; 48
 8be:	39 f4       	brne	.+14     	; 0x8ce <vfprintf+0x88>
 8c0:	21 60       	ori	r18, 0x01	; 1
 8c2:	26 c0       	rjmp	.+76     	; 0x910 <__stack+0x11>
 8c4:	22 60       	ori	r18, 0x02	; 2
 8c6:	24 60       	ori	r18, 0x04	; 4
 8c8:	23 c0       	rjmp	.+70     	; 0x910 <__stack+0x11>
 8ca:	28 60       	ori	r18, 0x08	; 8
 8cc:	21 c0       	rjmp	.+66     	; 0x910 <__stack+0x11>
 8ce:	27 fd       	sbrc	r18, 7
 8d0:	27 c0       	rjmp	.+78     	; 0x920 <__stack+0x21>
 8d2:	30 ed       	ldi	r19, 0xD0	; 208
 8d4:	38 0f       	add	r19, r24
 8d6:	3a 30       	cpi	r19, 0x0A	; 10
 8d8:	78 f4       	brcc	.+30     	; 0x8f8 <vfprintf+0xb2>
 8da:	26 ff       	sbrs	r18, 6
 8dc:	06 c0       	rjmp	.+12     	; 0x8ea <vfprintf+0xa4>
 8de:	fa e0       	ldi	r31, 0x0A	; 10
 8e0:	5f 9e       	mul	r5, r31
 8e2:	30 0d       	add	r19, r0
 8e4:	11 24       	eor	r1, r1
 8e6:	53 2e       	mov	r5, r19
 8e8:	13 c0       	rjmp	.+38     	; 0x910 <__stack+0x11>
 8ea:	8a e0       	ldi	r24, 0x0A	; 10
 8ec:	38 9e       	mul	r3, r24
 8ee:	30 0d       	add	r19, r0
 8f0:	11 24       	eor	r1, r1
 8f2:	33 2e       	mov	r3, r19
 8f4:	20 62       	ori	r18, 0x20	; 32
 8f6:	0c c0       	rjmp	.+24     	; 0x910 <__stack+0x11>
 8f8:	8e 32       	cpi	r24, 0x2E	; 46
 8fa:	21 f4       	brne	.+8      	; 0x904 <__stack+0x5>
 8fc:	26 fd       	sbrc	r18, 6
 8fe:	6b c1       	rjmp	.+726    	; 0xbd6 <__stack+0x2d7>
 900:	20 64       	ori	r18, 0x40	; 64
 902:	06 c0       	rjmp	.+12     	; 0x910 <__stack+0x11>
 904:	8c 36       	cpi	r24, 0x6C	; 108
 906:	11 f4       	brne	.+4      	; 0x90c <__stack+0xd>
 908:	20 68       	ori	r18, 0x80	; 128
 90a:	02 c0       	rjmp	.+4      	; 0x910 <__stack+0x11>
 90c:	88 36       	cpi	r24, 0x68	; 104
 90e:	41 f4       	brne	.+16     	; 0x920 <__stack+0x21>
 910:	f6 01       	movw	r30, r12
 912:	93 fd       	sbrc	r25, 3
 914:	85 91       	lpm	r24, Z+
 916:	93 ff       	sbrs	r25, 3
 918:	81 91       	ld	r24, Z+
 91a:	6f 01       	movw	r12, r30
 91c:	81 11       	cpse	r24, r1
 91e:	c1 cf       	rjmp	.-126    	; 0x8a2 <vfprintf+0x5c>
 920:	98 2f       	mov	r25, r24
 922:	9f 7d       	andi	r25, 0xDF	; 223
 924:	95 54       	subi	r25, 0x45	; 69
 926:	93 30       	cpi	r25, 0x03	; 3
 928:	28 f4       	brcc	.+10     	; 0x934 <__stack+0x35>
 92a:	0c 5f       	subi	r16, 0xFC	; 252
 92c:	1f 4f       	sbci	r17, 0xFF	; 255
 92e:	ff e3       	ldi	r31, 0x3F	; 63
 930:	f9 83       	std	Y+1, r31	; 0x01
 932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0x4f>
 934:	83 36       	cpi	r24, 0x63	; 99
 936:	31 f0       	breq	.+12     	; 0x944 <__stack+0x45>
 938:	83 37       	cpi	r24, 0x73	; 115
 93a:	71 f0       	breq	.+28     	; 0x958 <__stack+0x59>
 93c:	83 35       	cpi	r24, 0x53	; 83
 93e:	09 f0       	breq	.+2      	; 0x942 <__stack+0x43>
 940:	5b c0       	rjmp	.+182    	; 0x9f8 <__stack+0xf9>
 942:	22 c0       	rjmp	.+68     	; 0x988 <__stack+0x89>
 944:	f8 01       	movw	r30, r16
 946:	80 81       	ld	r24, Z
 948:	89 83       	std	Y+1, r24	; 0x01
 94a:	0e 5f       	subi	r16, 0xFE	; 254
 94c:	1f 4f       	sbci	r17, 0xFF	; 255
 94e:	44 24       	eor	r4, r4
 950:	43 94       	inc	r4
 952:	51 2c       	mov	r5, r1
 954:	54 01       	movw	r10, r8
 956:	15 c0       	rjmp	.+42     	; 0x982 <__stack+0x83>
 958:	38 01       	movw	r6, r16
 95a:	f2 e0       	ldi	r31, 0x02	; 2
 95c:	6f 0e       	add	r6, r31
 95e:	71 1c       	adc	r7, r1
 960:	f8 01       	movw	r30, r16
 962:	a0 80       	ld	r10, Z
 964:	b1 80       	ldd	r11, Z+1	; 0x01
 966:	26 ff       	sbrs	r18, 6
 968:	03 c0       	rjmp	.+6      	; 0x970 <__stack+0x71>
 96a:	65 2d       	mov	r22, r5
 96c:	70 e0       	ldi	r23, 0x00	; 0
 96e:	02 c0       	rjmp	.+4      	; 0x974 <__stack+0x75>
 970:	6f ef       	ldi	r22, 0xFF	; 255
 972:	7f ef       	ldi	r23, 0xFF	; 255
 974:	c5 01       	movw	r24, r10
 976:	2c 87       	std	Y+12, r18	; 0x0c
 978:	0e 94 4d 07 	call	0xe9a	; 0xe9a <strnlen>
 97c:	2c 01       	movw	r4, r24
 97e:	83 01       	movw	r16, r6
 980:	2c 85       	ldd	r18, Y+12	; 0x0c
 982:	2f 77       	andi	r18, 0x7F	; 127
 984:	22 2e       	mov	r2, r18
 986:	17 c0       	rjmp	.+46     	; 0x9b6 <__stack+0xb7>
 988:	38 01       	movw	r6, r16
 98a:	f2 e0       	ldi	r31, 0x02	; 2
 98c:	6f 0e       	add	r6, r31
 98e:	71 1c       	adc	r7, r1
 990:	f8 01       	movw	r30, r16
 992:	a0 80       	ld	r10, Z
 994:	b1 80       	ldd	r11, Z+1	; 0x01
 996:	26 ff       	sbrs	r18, 6
 998:	03 c0       	rjmp	.+6      	; 0x9a0 <__stack+0xa1>
 99a:	65 2d       	mov	r22, r5
 99c:	70 e0       	ldi	r23, 0x00	; 0
 99e:	02 c0       	rjmp	.+4      	; 0x9a4 <__stack+0xa5>
 9a0:	6f ef       	ldi	r22, 0xFF	; 255
 9a2:	7f ef       	ldi	r23, 0xFF	; 255
 9a4:	c5 01       	movw	r24, r10
 9a6:	2c 87       	std	Y+12, r18	; 0x0c
 9a8:	0e 94 3b 07 	call	0xe76	; 0xe76 <strnlen_P>
 9ac:	2c 01       	movw	r4, r24
 9ae:	2c 85       	ldd	r18, Y+12	; 0x0c
 9b0:	20 68       	ori	r18, 0x80	; 128
 9b2:	22 2e       	mov	r2, r18
 9b4:	83 01       	movw	r16, r6
 9b6:	23 fc       	sbrc	r2, 3
 9b8:	1b c0       	rjmp	.+54     	; 0x9f0 <__stack+0xf1>
 9ba:	83 2d       	mov	r24, r3
 9bc:	90 e0       	ldi	r25, 0x00	; 0
 9be:	48 16       	cp	r4, r24
 9c0:	59 06       	cpc	r5, r25
 9c2:	b0 f4       	brcc	.+44     	; 0x9f0 <__stack+0xf1>
 9c4:	b7 01       	movw	r22, r14
 9c6:	80 e2       	ldi	r24, 0x20	; 32
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	0e 94 b0 03 	call	0x760	; 0x760 <fputc>
 9ce:	3a 94       	dec	r3
 9d0:	f4 cf       	rjmp	.-24     	; 0x9ba <__stack+0xbb>
 9d2:	f5 01       	movw	r30, r10
 9d4:	27 fc       	sbrc	r2, 7
 9d6:	85 91       	lpm	r24, Z+
 9d8:	27 fe       	sbrs	r2, 7
 9da:	81 91       	ld	r24, Z+
 9dc:	5f 01       	movw	r10, r30
 9de:	b7 01       	movw	r22, r14
 9e0:	90 e0       	ldi	r25, 0x00	; 0
 9e2:	0e 94 b0 03 	call	0x760	; 0x760 <fputc>
 9e6:	31 10       	cpse	r3, r1
 9e8:	3a 94       	dec	r3
 9ea:	f1 e0       	ldi	r31, 0x01	; 1
 9ec:	4f 1a       	sub	r4, r31
 9ee:	51 08       	sbc	r5, r1
 9f0:	41 14       	cp	r4, r1
 9f2:	51 04       	cpc	r5, r1
 9f4:	71 f7       	brne	.-36     	; 0x9d2 <__stack+0xd3>
 9f6:	e5 c0       	rjmp	.+458    	; 0xbc2 <__stack+0x2c3>
 9f8:	84 36       	cpi	r24, 0x64	; 100
 9fa:	11 f0       	breq	.+4      	; 0xa00 <__stack+0x101>
 9fc:	89 36       	cpi	r24, 0x69	; 105
 9fe:	39 f5       	brne	.+78     	; 0xa4e <__stack+0x14f>
 a00:	f8 01       	movw	r30, r16
 a02:	27 ff       	sbrs	r18, 7
 a04:	07 c0       	rjmp	.+14     	; 0xa14 <__stack+0x115>
 a06:	60 81       	ld	r22, Z
 a08:	71 81       	ldd	r23, Z+1	; 0x01
 a0a:	82 81       	ldd	r24, Z+2	; 0x02
 a0c:	93 81       	ldd	r25, Z+3	; 0x03
 a0e:	0c 5f       	subi	r16, 0xFC	; 252
 a10:	1f 4f       	sbci	r17, 0xFF	; 255
 a12:	08 c0       	rjmp	.+16     	; 0xa24 <__stack+0x125>
 a14:	60 81       	ld	r22, Z
 a16:	71 81       	ldd	r23, Z+1	; 0x01
 a18:	88 27       	eor	r24, r24
 a1a:	77 fd       	sbrc	r23, 7
 a1c:	80 95       	com	r24
 a1e:	98 2f       	mov	r25, r24
 a20:	0e 5f       	subi	r16, 0xFE	; 254
 a22:	1f 4f       	sbci	r17, 0xFF	; 255
 a24:	2f 76       	andi	r18, 0x6F	; 111
 a26:	b2 2e       	mov	r11, r18
 a28:	97 ff       	sbrs	r25, 7
 a2a:	09 c0       	rjmp	.+18     	; 0xa3e <__stack+0x13f>
 a2c:	90 95       	com	r25
 a2e:	80 95       	com	r24
 a30:	70 95       	com	r23
 a32:	61 95       	neg	r22
 a34:	7f 4f       	sbci	r23, 0xFF	; 255
 a36:	8f 4f       	sbci	r24, 0xFF	; 255
 a38:	9f 4f       	sbci	r25, 0xFF	; 255
 a3a:	20 68       	ori	r18, 0x80	; 128
 a3c:	b2 2e       	mov	r11, r18
 a3e:	2a e0       	ldi	r18, 0x0A	; 10
 a40:	30 e0       	ldi	r19, 0x00	; 0
 a42:	a4 01       	movw	r20, r8
 a44:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__ultoa_invert>
 a48:	a8 2e       	mov	r10, r24
 a4a:	a8 18       	sub	r10, r8
 a4c:	44 c0       	rjmp	.+136    	; 0xad6 <__stack+0x1d7>
 a4e:	85 37       	cpi	r24, 0x75	; 117
 a50:	29 f4       	brne	.+10     	; 0xa5c <__stack+0x15d>
 a52:	2f 7e       	andi	r18, 0xEF	; 239
 a54:	b2 2e       	mov	r11, r18
 a56:	2a e0       	ldi	r18, 0x0A	; 10
 a58:	30 e0       	ldi	r19, 0x00	; 0
 a5a:	25 c0       	rjmp	.+74     	; 0xaa6 <__stack+0x1a7>
 a5c:	f2 2f       	mov	r31, r18
 a5e:	f9 7f       	andi	r31, 0xF9	; 249
 a60:	bf 2e       	mov	r11, r31
 a62:	8f 36       	cpi	r24, 0x6F	; 111
 a64:	c1 f0       	breq	.+48     	; 0xa96 <__stack+0x197>
 a66:	18 f4       	brcc	.+6      	; 0xa6e <__stack+0x16f>
 a68:	88 35       	cpi	r24, 0x58	; 88
 a6a:	79 f0       	breq	.+30     	; 0xa8a <__stack+0x18b>
 a6c:	b4 c0       	rjmp	.+360    	; 0xbd6 <__stack+0x2d7>
 a6e:	80 37       	cpi	r24, 0x70	; 112
 a70:	19 f0       	breq	.+6      	; 0xa78 <__stack+0x179>
 a72:	88 37       	cpi	r24, 0x78	; 120
 a74:	21 f0       	breq	.+8      	; 0xa7e <__stack+0x17f>
 a76:	af c0       	rjmp	.+350    	; 0xbd6 <__stack+0x2d7>
 a78:	2f 2f       	mov	r18, r31
 a7a:	20 61       	ori	r18, 0x10	; 16
 a7c:	b2 2e       	mov	r11, r18
 a7e:	b4 fe       	sbrs	r11, 4
 a80:	0d c0       	rjmp	.+26     	; 0xa9c <__stack+0x19d>
 a82:	8b 2d       	mov	r24, r11
 a84:	84 60       	ori	r24, 0x04	; 4
 a86:	b8 2e       	mov	r11, r24
 a88:	09 c0       	rjmp	.+18     	; 0xa9c <__stack+0x19d>
 a8a:	24 ff       	sbrs	r18, 4
 a8c:	0a c0       	rjmp	.+20     	; 0xaa2 <__stack+0x1a3>
 a8e:	9f 2f       	mov	r25, r31
 a90:	96 60       	ori	r25, 0x06	; 6
 a92:	b9 2e       	mov	r11, r25
 a94:	06 c0       	rjmp	.+12     	; 0xaa2 <__stack+0x1a3>
 a96:	28 e0       	ldi	r18, 0x08	; 8
 a98:	30 e0       	ldi	r19, 0x00	; 0
 a9a:	05 c0       	rjmp	.+10     	; 0xaa6 <__stack+0x1a7>
 a9c:	20 e1       	ldi	r18, 0x10	; 16
 a9e:	30 e0       	ldi	r19, 0x00	; 0
 aa0:	02 c0       	rjmp	.+4      	; 0xaa6 <__stack+0x1a7>
 aa2:	20 e1       	ldi	r18, 0x10	; 16
 aa4:	32 e0       	ldi	r19, 0x02	; 2
 aa6:	f8 01       	movw	r30, r16
 aa8:	b7 fe       	sbrs	r11, 7
 aaa:	07 c0       	rjmp	.+14     	; 0xaba <__stack+0x1bb>
 aac:	60 81       	ld	r22, Z
 aae:	71 81       	ldd	r23, Z+1	; 0x01
 ab0:	82 81       	ldd	r24, Z+2	; 0x02
 ab2:	93 81       	ldd	r25, Z+3	; 0x03
 ab4:	0c 5f       	subi	r16, 0xFC	; 252
 ab6:	1f 4f       	sbci	r17, 0xFF	; 255
 ab8:	06 c0       	rjmp	.+12     	; 0xac6 <__stack+0x1c7>
 aba:	60 81       	ld	r22, Z
 abc:	71 81       	ldd	r23, Z+1	; 0x01
 abe:	80 e0       	ldi	r24, 0x00	; 0
 ac0:	90 e0       	ldi	r25, 0x00	; 0
 ac2:	0e 5f       	subi	r16, 0xFE	; 254
 ac4:	1f 4f       	sbci	r17, 0xFF	; 255
 ac6:	a4 01       	movw	r20, r8
 ac8:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__ultoa_invert>
 acc:	a8 2e       	mov	r10, r24
 ace:	a8 18       	sub	r10, r8
 ad0:	fb 2d       	mov	r31, r11
 ad2:	ff 77       	andi	r31, 0x7F	; 127
 ad4:	bf 2e       	mov	r11, r31
 ad6:	b6 fe       	sbrs	r11, 6
 ad8:	0b c0       	rjmp	.+22     	; 0xaf0 <__stack+0x1f1>
 ada:	2b 2d       	mov	r18, r11
 adc:	2e 7f       	andi	r18, 0xFE	; 254
 ade:	a5 14       	cp	r10, r5
 ae0:	50 f4       	brcc	.+20     	; 0xaf6 <__stack+0x1f7>
 ae2:	b4 fe       	sbrs	r11, 4
 ae4:	0a c0       	rjmp	.+20     	; 0xafa <__stack+0x1fb>
 ae6:	b2 fc       	sbrc	r11, 2
 ae8:	08 c0       	rjmp	.+16     	; 0xafa <__stack+0x1fb>
 aea:	2b 2d       	mov	r18, r11
 aec:	2e 7e       	andi	r18, 0xEE	; 238
 aee:	05 c0       	rjmp	.+10     	; 0xafa <__stack+0x1fb>
 af0:	7a 2c       	mov	r7, r10
 af2:	2b 2d       	mov	r18, r11
 af4:	03 c0       	rjmp	.+6      	; 0xafc <__stack+0x1fd>
 af6:	7a 2c       	mov	r7, r10
 af8:	01 c0       	rjmp	.+2      	; 0xafc <__stack+0x1fd>
 afa:	75 2c       	mov	r7, r5
 afc:	24 ff       	sbrs	r18, 4
 afe:	0d c0       	rjmp	.+26     	; 0xb1a <__stack+0x21b>
 b00:	fe 01       	movw	r30, r28
 b02:	ea 0d       	add	r30, r10
 b04:	f1 1d       	adc	r31, r1
 b06:	80 81       	ld	r24, Z
 b08:	80 33       	cpi	r24, 0x30	; 48
 b0a:	11 f4       	brne	.+4      	; 0xb10 <__stack+0x211>
 b0c:	29 7e       	andi	r18, 0xE9	; 233
 b0e:	09 c0       	rjmp	.+18     	; 0xb22 <__stack+0x223>
 b10:	22 ff       	sbrs	r18, 2
 b12:	06 c0       	rjmp	.+12     	; 0xb20 <__stack+0x221>
 b14:	73 94       	inc	r7
 b16:	73 94       	inc	r7
 b18:	04 c0       	rjmp	.+8      	; 0xb22 <__stack+0x223>
 b1a:	82 2f       	mov	r24, r18
 b1c:	86 78       	andi	r24, 0x86	; 134
 b1e:	09 f0       	breq	.+2      	; 0xb22 <__stack+0x223>
 b20:	73 94       	inc	r7
 b22:	23 fd       	sbrc	r18, 3
 b24:	13 c0       	rjmp	.+38     	; 0xb4c <__stack+0x24d>
 b26:	20 ff       	sbrs	r18, 0
 b28:	06 c0       	rjmp	.+12     	; 0xb36 <__stack+0x237>
 b2a:	5a 2c       	mov	r5, r10
 b2c:	73 14       	cp	r7, r3
 b2e:	18 f4       	brcc	.+6      	; 0xb36 <__stack+0x237>
 b30:	53 0c       	add	r5, r3
 b32:	57 18       	sub	r5, r7
 b34:	73 2c       	mov	r7, r3
 b36:	73 14       	cp	r7, r3
 b38:	68 f4       	brcc	.+26     	; 0xb54 <__stack+0x255>
 b3a:	b7 01       	movw	r22, r14
 b3c:	80 e2       	ldi	r24, 0x20	; 32
 b3e:	90 e0       	ldi	r25, 0x00	; 0
 b40:	2c 87       	std	Y+12, r18	; 0x0c
 b42:	0e 94 b0 03 	call	0x760	; 0x760 <fputc>
 b46:	73 94       	inc	r7
 b48:	2c 85       	ldd	r18, Y+12	; 0x0c
 b4a:	f5 cf       	rjmp	.-22     	; 0xb36 <__stack+0x237>
 b4c:	73 14       	cp	r7, r3
 b4e:	10 f4       	brcc	.+4      	; 0xb54 <__stack+0x255>
 b50:	37 18       	sub	r3, r7
 b52:	01 c0       	rjmp	.+2      	; 0xb56 <__stack+0x257>
 b54:	31 2c       	mov	r3, r1
 b56:	24 ff       	sbrs	r18, 4
 b58:	12 c0       	rjmp	.+36     	; 0xb7e <__stack+0x27f>
 b5a:	b7 01       	movw	r22, r14
 b5c:	80 e3       	ldi	r24, 0x30	; 48
 b5e:	90 e0       	ldi	r25, 0x00	; 0
 b60:	2c 87       	std	Y+12, r18	; 0x0c
 b62:	0e 94 b0 03 	call	0x760	; 0x760 <fputc>
 b66:	2c 85       	ldd	r18, Y+12	; 0x0c
 b68:	22 ff       	sbrs	r18, 2
 b6a:	17 c0       	rjmp	.+46     	; 0xb9a <__stack+0x29b>
 b6c:	21 ff       	sbrs	r18, 1
 b6e:	03 c0       	rjmp	.+6      	; 0xb76 <__stack+0x277>
 b70:	88 e5       	ldi	r24, 0x58	; 88
 b72:	90 e0       	ldi	r25, 0x00	; 0
 b74:	02 c0       	rjmp	.+4      	; 0xb7a <__stack+0x27b>
 b76:	88 e7       	ldi	r24, 0x78	; 120
 b78:	90 e0       	ldi	r25, 0x00	; 0
 b7a:	b7 01       	movw	r22, r14
 b7c:	0c c0       	rjmp	.+24     	; 0xb96 <__stack+0x297>
 b7e:	82 2f       	mov	r24, r18
 b80:	86 78       	andi	r24, 0x86	; 134
 b82:	59 f0       	breq	.+22     	; 0xb9a <__stack+0x29b>
 b84:	21 fd       	sbrc	r18, 1
 b86:	02 c0       	rjmp	.+4      	; 0xb8c <__stack+0x28d>
 b88:	80 e2       	ldi	r24, 0x20	; 32
 b8a:	01 c0       	rjmp	.+2      	; 0xb8e <__stack+0x28f>
 b8c:	8b e2       	ldi	r24, 0x2B	; 43
 b8e:	27 fd       	sbrc	r18, 7
 b90:	8d e2       	ldi	r24, 0x2D	; 45
 b92:	b7 01       	movw	r22, r14
 b94:	90 e0       	ldi	r25, 0x00	; 0
 b96:	0e 94 b0 03 	call	0x760	; 0x760 <fputc>
 b9a:	a5 14       	cp	r10, r5
 b9c:	38 f4       	brcc	.+14     	; 0xbac <__stack+0x2ad>
 b9e:	b7 01       	movw	r22, r14
 ba0:	80 e3       	ldi	r24, 0x30	; 48
 ba2:	90 e0       	ldi	r25, 0x00	; 0
 ba4:	0e 94 b0 03 	call	0x760	; 0x760 <fputc>
 ba8:	5a 94       	dec	r5
 baa:	f7 cf       	rjmp	.-18     	; 0xb9a <__stack+0x29b>
 bac:	aa 94       	dec	r10
 bae:	f4 01       	movw	r30, r8
 bb0:	ea 0d       	add	r30, r10
 bb2:	f1 1d       	adc	r31, r1
 bb4:	80 81       	ld	r24, Z
 bb6:	b7 01       	movw	r22, r14
 bb8:	90 e0       	ldi	r25, 0x00	; 0
 bba:	0e 94 b0 03 	call	0x760	; 0x760 <fputc>
 bbe:	a1 10       	cpse	r10, r1
 bc0:	f5 cf       	rjmp	.-22     	; 0xbac <__stack+0x2ad>
 bc2:	33 20       	and	r3, r3
 bc4:	09 f4       	brne	.+2      	; 0xbc8 <__stack+0x2c9>
 bc6:	51 ce       	rjmp	.-862    	; 0x86a <vfprintf+0x24>
 bc8:	b7 01       	movw	r22, r14
 bca:	80 e2       	ldi	r24, 0x20	; 32
 bcc:	90 e0       	ldi	r25, 0x00	; 0
 bce:	0e 94 b0 03 	call	0x760	; 0x760 <fputc>
 bd2:	3a 94       	dec	r3
 bd4:	f6 cf       	rjmp	.-20     	; 0xbc2 <__stack+0x2c3>
 bd6:	f7 01       	movw	r30, r14
 bd8:	86 81       	ldd	r24, Z+6	; 0x06
 bda:	97 81       	ldd	r25, Z+7	; 0x07
 bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <__stack+0x2e3>
 bde:	8f ef       	ldi	r24, 0xFF	; 255
 be0:	9f ef       	ldi	r25, 0xFF	; 255
 be2:	2c 96       	adiw	r28, 0x0c	; 12
 be4:	e2 e1       	ldi	r30, 0x12	; 18
 be6:	0c 94 d2 07 	jmp	0xfa4	; 0xfa4 <__epilogue_restores__>

00000bea <calloc>:
 bea:	0f 93       	push	r16
 bec:	1f 93       	push	r17
 bee:	cf 93       	push	r28
 bf0:	df 93       	push	r29
 bf2:	86 9f       	mul	r24, r22
 bf4:	80 01       	movw	r16, r0
 bf6:	87 9f       	mul	r24, r23
 bf8:	10 0d       	add	r17, r0
 bfa:	96 9f       	mul	r25, r22
 bfc:	10 0d       	add	r17, r0
 bfe:	11 24       	eor	r1, r1
 c00:	c8 01       	movw	r24, r16
 c02:	0e 94 11 06 	call	0xc22	; 0xc22 <malloc>
 c06:	ec 01       	movw	r28, r24
 c08:	00 97       	sbiw	r24, 0x00	; 0
 c0a:	29 f0       	breq	.+10     	; 0xc16 <calloc+0x2c>
 c0c:	a8 01       	movw	r20, r16
 c0e:	60 e0       	ldi	r22, 0x00	; 0
 c10:	70 e0       	ldi	r23, 0x00	; 0
 c12:	0e 94 46 07 	call	0xe8c	; 0xe8c <memset>
 c16:	ce 01       	movw	r24, r28
 c18:	df 91       	pop	r29
 c1a:	cf 91       	pop	r28
 c1c:	1f 91       	pop	r17
 c1e:	0f 91       	pop	r16
 c20:	08 95       	ret

00000c22 <malloc>:
 c22:	cf 93       	push	r28
 c24:	df 93       	push	r29
 c26:	82 30       	cpi	r24, 0x02	; 2
 c28:	91 05       	cpc	r25, r1
 c2a:	10 f4       	brcc	.+4      	; 0xc30 <malloc+0xe>
 c2c:	82 e0       	ldi	r24, 0x02	; 2
 c2e:	90 e0       	ldi	r25, 0x00	; 0
 c30:	e0 91 d9 01 	lds	r30, 0x01D9
 c34:	f0 91 da 01 	lds	r31, 0x01DA
 c38:	20 e0       	ldi	r18, 0x00	; 0
 c3a:	30 e0       	ldi	r19, 0x00	; 0
 c3c:	a0 e0       	ldi	r26, 0x00	; 0
 c3e:	b0 e0       	ldi	r27, 0x00	; 0
 c40:	30 97       	sbiw	r30, 0x00	; 0
 c42:	39 f1       	breq	.+78     	; 0xc92 <malloc+0x70>
 c44:	40 81       	ld	r20, Z
 c46:	51 81       	ldd	r21, Z+1	; 0x01
 c48:	48 17       	cp	r20, r24
 c4a:	59 07       	cpc	r21, r25
 c4c:	b8 f0       	brcs	.+46     	; 0xc7c <malloc+0x5a>
 c4e:	48 17       	cp	r20, r24
 c50:	59 07       	cpc	r21, r25
 c52:	71 f4       	brne	.+28     	; 0xc70 <malloc+0x4e>
 c54:	82 81       	ldd	r24, Z+2	; 0x02
 c56:	93 81       	ldd	r25, Z+3	; 0x03
 c58:	10 97       	sbiw	r26, 0x00	; 0
 c5a:	29 f0       	breq	.+10     	; 0xc66 <malloc+0x44>
 c5c:	13 96       	adiw	r26, 0x03	; 3
 c5e:	9c 93       	st	X, r25
 c60:	8e 93       	st	-X, r24
 c62:	12 97       	sbiw	r26, 0x02	; 2
 c64:	2c c0       	rjmp	.+88     	; 0xcbe <malloc+0x9c>
 c66:	90 93 da 01 	sts	0x01DA, r25
 c6a:	80 93 d9 01 	sts	0x01D9, r24
 c6e:	27 c0       	rjmp	.+78     	; 0xcbe <malloc+0x9c>
 c70:	21 15       	cp	r18, r1
 c72:	31 05       	cpc	r19, r1
 c74:	31 f0       	breq	.+12     	; 0xc82 <malloc+0x60>
 c76:	42 17       	cp	r20, r18
 c78:	53 07       	cpc	r21, r19
 c7a:	18 f0       	brcs	.+6      	; 0xc82 <malloc+0x60>
 c7c:	a9 01       	movw	r20, r18
 c7e:	db 01       	movw	r26, r22
 c80:	01 c0       	rjmp	.+2      	; 0xc84 <malloc+0x62>
 c82:	ef 01       	movw	r28, r30
 c84:	9a 01       	movw	r18, r20
 c86:	bd 01       	movw	r22, r26
 c88:	df 01       	movw	r26, r30
 c8a:	02 80       	ldd	r0, Z+2	; 0x02
 c8c:	f3 81       	ldd	r31, Z+3	; 0x03
 c8e:	e0 2d       	mov	r30, r0
 c90:	d7 cf       	rjmp	.-82     	; 0xc40 <malloc+0x1e>
 c92:	21 15       	cp	r18, r1
 c94:	31 05       	cpc	r19, r1
 c96:	f9 f0       	breq	.+62     	; 0xcd6 <malloc+0xb4>
 c98:	28 1b       	sub	r18, r24
 c9a:	39 0b       	sbc	r19, r25
 c9c:	24 30       	cpi	r18, 0x04	; 4
 c9e:	31 05       	cpc	r19, r1
 ca0:	80 f4       	brcc	.+32     	; 0xcc2 <malloc+0xa0>
 ca2:	8a 81       	ldd	r24, Y+2	; 0x02
 ca4:	9b 81       	ldd	r25, Y+3	; 0x03
 ca6:	61 15       	cp	r22, r1
 ca8:	71 05       	cpc	r23, r1
 caa:	21 f0       	breq	.+8      	; 0xcb4 <malloc+0x92>
 cac:	fb 01       	movw	r30, r22
 cae:	93 83       	std	Z+3, r25	; 0x03
 cb0:	82 83       	std	Z+2, r24	; 0x02
 cb2:	04 c0       	rjmp	.+8      	; 0xcbc <malloc+0x9a>
 cb4:	90 93 da 01 	sts	0x01DA, r25
 cb8:	80 93 d9 01 	sts	0x01D9, r24
 cbc:	fe 01       	movw	r30, r28
 cbe:	32 96       	adiw	r30, 0x02	; 2
 cc0:	44 c0       	rjmp	.+136    	; 0xd4a <malloc+0x128>
 cc2:	fe 01       	movw	r30, r28
 cc4:	e2 0f       	add	r30, r18
 cc6:	f3 1f       	adc	r31, r19
 cc8:	81 93       	st	Z+, r24
 cca:	91 93       	st	Z+, r25
 ccc:	22 50       	subi	r18, 0x02	; 2
 cce:	31 09       	sbc	r19, r1
 cd0:	39 83       	std	Y+1, r19	; 0x01
 cd2:	28 83       	st	Y, r18
 cd4:	3a c0       	rjmp	.+116    	; 0xd4a <malloc+0x128>
 cd6:	20 91 d7 01 	lds	r18, 0x01D7
 cda:	30 91 d8 01 	lds	r19, 0x01D8
 cde:	23 2b       	or	r18, r19
 ce0:	41 f4       	brne	.+16     	; 0xcf2 <malloc+0xd0>
 ce2:	20 91 02 01 	lds	r18, 0x0102
 ce6:	30 91 03 01 	lds	r19, 0x0103
 cea:	30 93 d8 01 	sts	0x01D8, r19
 cee:	20 93 d7 01 	sts	0x01D7, r18
 cf2:	20 91 00 01 	lds	r18, 0x0100
 cf6:	30 91 01 01 	lds	r19, 0x0101
 cfa:	21 15       	cp	r18, r1
 cfc:	31 05       	cpc	r19, r1
 cfe:	41 f4       	brne	.+16     	; 0xd10 <malloc+0xee>
 d00:	2d b7       	in	r18, 0x3d	; 61
 d02:	3e b7       	in	r19, 0x3e	; 62
 d04:	40 91 04 01 	lds	r20, 0x0104
 d08:	50 91 05 01 	lds	r21, 0x0105
 d0c:	24 1b       	sub	r18, r20
 d0e:	35 0b       	sbc	r19, r21
 d10:	e0 91 d7 01 	lds	r30, 0x01D7
 d14:	f0 91 d8 01 	lds	r31, 0x01D8
 d18:	e2 17       	cp	r30, r18
 d1a:	f3 07       	cpc	r31, r19
 d1c:	a0 f4       	brcc	.+40     	; 0xd46 <malloc+0x124>
 d1e:	2e 1b       	sub	r18, r30
 d20:	3f 0b       	sbc	r19, r31
 d22:	28 17       	cp	r18, r24
 d24:	39 07       	cpc	r19, r25
 d26:	78 f0       	brcs	.+30     	; 0xd46 <malloc+0x124>
 d28:	ac 01       	movw	r20, r24
 d2a:	4e 5f       	subi	r20, 0xFE	; 254
 d2c:	5f 4f       	sbci	r21, 0xFF	; 255
 d2e:	24 17       	cp	r18, r20
 d30:	35 07       	cpc	r19, r21
 d32:	48 f0       	brcs	.+18     	; 0xd46 <malloc+0x124>
 d34:	4e 0f       	add	r20, r30
 d36:	5f 1f       	adc	r21, r31
 d38:	50 93 d8 01 	sts	0x01D8, r21
 d3c:	40 93 d7 01 	sts	0x01D7, r20
 d40:	81 93       	st	Z+, r24
 d42:	91 93       	st	Z+, r25
 d44:	02 c0       	rjmp	.+4      	; 0xd4a <malloc+0x128>
 d46:	e0 e0       	ldi	r30, 0x00	; 0
 d48:	f0 e0       	ldi	r31, 0x00	; 0
 d4a:	cf 01       	movw	r24, r30
 d4c:	df 91       	pop	r29
 d4e:	cf 91       	pop	r28
 d50:	08 95       	ret

00000d52 <free>:
 d52:	cf 93       	push	r28
 d54:	df 93       	push	r29
 d56:	00 97       	sbiw	r24, 0x00	; 0
 d58:	09 f4       	brne	.+2      	; 0xd5c <free+0xa>
 d5a:	87 c0       	rjmp	.+270    	; 0xe6a <free+0x118>
 d5c:	fc 01       	movw	r30, r24
 d5e:	32 97       	sbiw	r30, 0x02	; 2
 d60:	13 82       	std	Z+3, r1	; 0x03
 d62:	12 82       	std	Z+2, r1	; 0x02
 d64:	c0 91 d9 01 	lds	r28, 0x01D9
 d68:	d0 91 da 01 	lds	r29, 0x01DA
 d6c:	20 97       	sbiw	r28, 0x00	; 0
 d6e:	81 f4       	brne	.+32     	; 0xd90 <free+0x3e>
 d70:	20 81       	ld	r18, Z
 d72:	31 81       	ldd	r19, Z+1	; 0x01
 d74:	28 0f       	add	r18, r24
 d76:	39 1f       	adc	r19, r25
 d78:	80 91 d7 01 	lds	r24, 0x01D7
 d7c:	90 91 d8 01 	lds	r25, 0x01D8
 d80:	82 17       	cp	r24, r18
 d82:	93 07       	cpc	r25, r19
 d84:	79 f5       	brne	.+94     	; 0xde4 <free+0x92>
 d86:	f0 93 d8 01 	sts	0x01D8, r31
 d8a:	e0 93 d7 01 	sts	0x01D7, r30
 d8e:	6d c0       	rjmp	.+218    	; 0xe6a <free+0x118>
 d90:	de 01       	movw	r26, r28
 d92:	20 e0       	ldi	r18, 0x00	; 0
 d94:	30 e0       	ldi	r19, 0x00	; 0
 d96:	ae 17       	cp	r26, r30
 d98:	bf 07       	cpc	r27, r31
 d9a:	50 f4       	brcc	.+20     	; 0xdb0 <free+0x5e>
 d9c:	12 96       	adiw	r26, 0x02	; 2
 d9e:	4d 91       	ld	r20, X+
 da0:	5c 91       	ld	r21, X
 da2:	13 97       	sbiw	r26, 0x03	; 3
 da4:	9d 01       	movw	r18, r26
 da6:	41 15       	cp	r20, r1
 da8:	51 05       	cpc	r21, r1
 daa:	09 f1       	breq	.+66     	; 0xdee <free+0x9c>
 dac:	da 01       	movw	r26, r20
 dae:	f3 cf       	rjmp	.-26     	; 0xd96 <free+0x44>
 db0:	b3 83       	std	Z+3, r27	; 0x03
 db2:	a2 83       	std	Z+2, r26	; 0x02
 db4:	40 81       	ld	r20, Z
 db6:	51 81       	ldd	r21, Z+1	; 0x01
 db8:	84 0f       	add	r24, r20
 dba:	95 1f       	adc	r25, r21
 dbc:	8a 17       	cp	r24, r26
 dbe:	9b 07       	cpc	r25, r27
 dc0:	71 f4       	brne	.+28     	; 0xdde <free+0x8c>
 dc2:	8d 91       	ld	r24, X+
 dc4:	9c 91       	ld	r25, X
 dc6:	11 97       	sbiw	r26, 0x01	; 1
 dc8:	84 0f       	add	r24, r20
 dca:	95 1f       	adc	r25, r21
 dcc:	02 96       	adiw	r24, 0x02	; 2
 dce:	91 83       	std	Z+1, r25	; 0x01
 dd0:	80 83       	st	Z, r24
 dd2:	12 96       	adiw	r26, 0x02	; 2
 dd4:	8d 91       	ld	r24, X+
 dd6:	9c 91       	ld	r25, X
 dd8:	13 97       	sbiw	r26, 0x03	; 3
 dda:	93 83       	std	Z+3, r25	; 0x03
 ddc:	82 83       	std	Z+2, r24	; 0x02
 dde:	21 15       	cp	r18, r1
 de0:	31 05       	cpc	r19, r1
 de2:	29 f4       	brne	.+10     	; 0xdee <free+0x9c>
 de4:	f0 93 da 01 	sts	0x01DA, r31
 de8:	e0 93 d9 01 	sts	0x01D9, r30
 dec:	3e c0       	rjmp	.+124    	; 0xe6a <free+0x118>
 dee:	d9 01       	movw	r26, r18
 df0:	13 96       	adiw	r26, 0x03	; 3
 df2:	fc 93       	st	X, r31
 df4:	ee 93       	st	-X, r30
 df6:	12 97       	sbiw	r26, 0x02	; 2
 df8:	4d 91       	ld	r20, X+
 dfa:	5d 91       	ld	r21, X+
 dfc:	a4 0f       	add	r26, r20
 dfe:	b5 1f       	adc	r27, r21
 e00:	ea 17       	cp	r30, r26
 e02:	fb 07       	cpc	r31, r27
 e04:	79 f4       	brne	.+30     	; 0xe24 <free+0xd2>
 e06:	80 81       	ld	r24, Z
 e08:	91 81       	ldd	r25, Z+1	; 0x01
 e0a:	84 0f       	add	r24, r20
 e0c:	95 1f       	adc	r25, r21
 e0e:	02 96       	adiw	r24, 0x02	; 2
 e10:	d9 01       	movw	r26, r18
 e12:	11 96       	adiw	r26, 0x01	; 1
 e14:	9c 93       	st	X, r25
 e16:	8e 93       	st	-X, r24
 e18:	82 81       	ldd	r24, Z+2	; 0x02
 e1a:	93 81       	ldd	r25, Z+3	; 0x03
 e1c:	13 96       	adiw	r26, 0x03	; 3
 e1e:	9c 93       	st	X, r25
 e20:	8e 93       	st	-X, r24
 e22:	12 97       	sbiw	r26, 0x02	; 2
 e24:	e0 e0       	ldi	r30, 0x00	; 0
 e26:	f0 e0       	ldi	r31, 0x00	; 0
 e28:	8a 81       	ldd	r24, Y+2	; 0x02
 e2a:	9b 81       	ldd	r25, Y+3	; 0x03
 e2c:	00 97       	sbiw	r24, 0x00	; 0
 e2e:	19 f0       	breq	.+6      	; 0xe36 <free+0xe4>
 e30:	fe 01       	movw	r30, r28
 e32:	ec 01       	movw	r28, r24
 e34:	f9 cf       	rjmp	.-14     	; 0xe28 <free+0xd6>
 e36:	ce 01       	movw	r24, r28
 e38:	02 96       	adiw	r24, 0x02	; 2
 e3a:	28 81       	ld	r18, Y
 e3c:	39 81       	ldd	r19, Y+1	; 0x01
 e3e:	82 0f       	add	r24, r18
 e40:	93 1f       	adc	r25, r19
 e42:	20 91 d7 01 	lds	r18, 0x01D7
 e46:	30 91 d8 01 	lds	r19, 0x01D8
 e4a:	28 17       	cp	r18, r24
 e4c:	39 07       	cpc	r19, r25
 e4e:	69 f4       	brne	.+26     	; 0xe6a <free+0x118>
 e50:	30 97       	sbiw	r30, 0x00	; 0
 e52:	29 f4       	brne	.+10     	; 0xe5e <free+0x10c>
 e54:	10 92 da 01 	sts	0x01DA, r1
 e58:	10 92 d9 01 	sts	0x01D9, r1
 e5c:	02 c0       	rjmp	.+4      	; 0xe62 <free+0x110>
 e5e:	13 82       	std	Z+3, r1	; 0x03
 e60:	12 82       	std	Z+2, r1	; 0x02
 e62:	d0 93 d8 01 	sts	0x01D8, r29
 e66:	c0 93 d7 01 	sts	0x01D7, r28
 e6a:	df 91       	pop	r29
 e6c:	cf 91       	pop	r28
 e6e:	08 95       	ret

00000e70 <__ctype_isfalse>:
 e70:	99 27       	eor	r25, r25
 e72:	88 27       	eor	r24, r24

00000e74 <__ctype_istrue>:
 e74:	08 95       	ret

00000e76 <strnlen_P>:
 e76:	fc 01       	movw	r30, r24
 e78:	05 90       	lpm	r0, Z+
 e7a:	61 50       	subi	r22, 0x01	; 1
 e7c:	70 40       	sbci	r23, 0x00	; 0
 e7e:	01 10       	cpse	r0, r1
 e80:	d8 f7       	brcc	.-10     	; 0xe78 <strnlen_P+0x2>
 e82:	80 95       	com	r24
 e84:	90 95       	com	r25
 e86:	8e 0f       	add	r24, r30
 e88:	9f 1f       	adc	r25, r31
 e8a:	08 95       	ret

00000e8c <memset>:
 e8c:	dc 01       	movw	r26, r24
 e8e:	01 c0       	rjmp	.+2      	; 0xe92 <memset+0x6>
 e90:	6d 93       	st	X+, r22
 e92:	41 50       	subi	r20, 0x01	; 1
 e94:	50 40       	sbci	r21, 0x00	; 0
 e96:	e0 f7       	brcc	.-8      	; 0xe90 <memset+0x4>
 e98:	08 95       	ret

00000e9a <strnlen>:
 e9a:	fc 01       	movw	r30, r24
 e9c:	61 50       	subi	r22, 0x01	; 1
 e9e:	70 40       	sbci	r23, 0x00	; 0
 ea0:	01 90       	ld	r0, Z+
 ea2:	01 10       	cpse	r0, r1
 ea4:	d8 f7       	brcc	.-10     	; 0xe9c <strnlen+0x2>
 ea6:	80 95       	com	r24
 ea8:	90 95       	com	r25
 eaa:	8e 0f       	add	r24, r30
 eac:	9f 1f       	adc	r25, r31
 eae:	08 95       	ret

00000eb0 <__ultoa_invert>:
 eb0:	fa 01       	movw	r30, r20
 eb2:	aa 27       	eor	r26, r26
 eb4:	28 30       	cpi	r18, 0x08	; 8
 eb6:	51 f1       	breq	.+84     	; 0xf0c <__ultoa_invert+0x5c>
 eb8:	20 31       	cpi	r18, 0x10	; 16
 eba:	81 f1       	breq	.+96     	; 0xf1c <__ultoa_invert+0x6c>
 ebc:	e8 94       	clt
 ebe:	6f 93       	push	r22
 ec0:	6e 7f       	andi	r22, 0xFE	; 254
 ec2:	6e 5f       	subi	r22, 0xFE	; 254
 ec4:	7f 4f       	sbci	r23, 0xFF	; 255
 ec6:	8f 4f       	sbci	r24, 0xFF	; 255
 ec8:	9f 4f       	sbci	r25, 0xFF	; 255
 eca:	af 4f       	sbci	r26, 0xFF	; 255
 ecc:	b1 e0       	ldi	r27, 0x01	; 1
 ece:	3e d0       	rcall	.+124    	; 0xf4c <__ultoa_invert+0x9c>
 ed0:	b4 e0       	ldi	r27, 0x04	; 4
 ed2:	3c d0       	rcall	.+120    	; 0xf4c <__ultoa_invert+0x9c>
 ed4:	67 0f       	add	r22, r23
 ed6:	78 1f       	adc	r23, r24
 ed8:	89 1f       	adc	r24, r25
 eda:	9a 1f       	adc	r25, r26
 edc:	a1 1d       	adc	r26, r1
 ede:	68 0f       	add	r22, r24
 ee0:	79 1f       	adc	r23, r25
 ee2:	8a 1f       	adc	r24, r26
 ee4:	91 1d       	adc	r25, r1
 ee6:	a1 1d       	adc	r26, r1
 ee8:	6a 0f       	add	r22, r26
 eea:	71 1d       	adc	r23, r1
 eec:	81 1d       	adc	r24, r1
 eee:	91 1d       	adc	r25, r1
 ef0:	a1 1d       	adc	r26, r1
 ef2:	20 d0       	rcall	.+64     	; 0xf34 <__ultoa_invert+0x84>
 ef4:	09 f4       	brne	.+2      	; 0xef8 <__ultoa_invert+0x48>
 ef6:	68 94       	set
 ef8:	3f 91       	pop	r19
 efa:	2a e0       	ldi	r18, 0x0A	; 10
 efc:	26 9f       	mul	r18, r22
 efe:	11 24       	eor	r1, r1
 f00:	30 19       	sub	r19, r0
 f02:	30 5d       	subi	r19, 0xD0	; 208
 f04:	31 93       	st	Z+, r19
 f06:	de f6       	brtc	.-74     	; 0xebe <__ultoa_invert+0xe>
 f08:	cf 01       	movw	r24, r30
 f0a:	08 95       	ret
 f0c:	46 2f       	mov	r20, r22
 f0e:	47 70       	andi	r20, 0x07	; 7
 f10:	40 5d       	subi	r20, 0xD0	; 208
 f12:	41 93       	st	Z+, r20
 f14:	b3 e0       	ldi	r27, 0x03	; 3
 f16:	0f d0       	rcall	.+30     	; 0xf36 <__ultoa_invert+0x86>
 f18:	c9 f7       	brne	.-14     	; 0xf0c <__ultoa_invert+0x5c>
 f1a:	f6 cf       	rjmp	.-20     	; 0xf08 <__ultoa_invert+0x58>
 f1c:	46 2f       	mov	r20, r22
 f1e:	4f 70       	andi	r20, 0x0F	; 15
 f20:	40 5d       	subi	r20, 0xD0	; 208
 f22:	4a 33       	cpi	r20, 0x3A	; 58
 f24:	18 f0       	brcs	.+6      	; 0xf2c <__ultoa_invert+0x7c>
 f26:	49 5d       	subi	r20, 0xD9	; 217
 f28:	31 fd       	sbrc	r19, 1
 f2a:	40 52       	subi	r20, 0x20	; 32
 f2c:	41 93       	st	Z+, r20
 f2e:	02 d0       	rcall	.+4      	; 0xf34 <__ultoa_invert+0x84>
 f30:	a9 f7       	brne	.-22     	; 0xf1c <__ultoa_invert+0x6c>
 f32:	ea cf       	rjmp	.-44     	; 0xf08 <__ultoa_invert+0x58>
 f34:	b4 e0       	ldi	r27, 0x04	; 4
 f36:	a6 95       	lsr	r26
 f38:	97 95       	ror	r25
 f3a:	87 95       	ror	r24
 f3c:	77 95       	ror	r23
 f3e:	67 95       	ror	r22
 f40:	ba 95       	dec	r27
 f42:	c9 f7       	brne	.-14     	; 0xf36 <__ultoa_invert+0x86>
 f44:	00 97       	sbiw	r24, 0x00	; 0
 f46:	61 05       	cpc	r22, r1
 f48:	71 05       	cpc	r23, r1
 f4a:	08 95       	ret
 f4c:	9b 01       	movw	r18, r22
 f4e:	ac 01       	movw	r20, r24
 f50:	0a 2e       	mov	r0, r26
 f52:	06 94       	lsr	r0
 f54:	57 95       	ror	r21
 f56:	47 95       	ror	r20
 f58:	37 95       	ror	r19
 f5a:	27 95       	ror	r18
 f5c:	ba 95       	dec	r27
 f5e:	c9 f7       	brne	.-14     	; 0xf52 <__ultoa_invert+0xa2>
 f60:	62 0f       	add	r22, r18
 f62:	73 1f       	adc	r23, r19
 f64:	84 1f       	adc	r24, r20
 f66:	95 1f       	adc	r25, r21
 f68:	a0 1d       	adc	r26, r0
 f6a:	08 95       	ret

00000f6c <__prologue_saves__>:
 f6c:	2f 92       	push	r2
 f6e:	3f 92       	push	r3
 f70:	4f 92       	push	r4
 f72:	5f 92       	push	r5
 f74:	6f 92       	push	r6
 f76:	7f 92       	push	r7
 f78:	8f 92       	push	r8
 f7a:	9f 92       	push	r9
 f7c:	af 92       	push	r10
 f7e:	bf 92       	push	r11
 f80:	cf 92       	push	r12
 f82:	df 92       	push	r13
 f84:	ef 92       	push	r14
 f86:	ff 92       	push	r15
 f88:	0f 93       	push	r16
 f8a:	1f 93       	push	r17
 f8c:	cf 93       	push	r28
 f8e:	df 93       	push	r29
 f90:	cd b7       	in	r28, 0x3d	; 61
 f92:	de b7       	in	r29, 0x3e	; 62
 f94:	ca 1b       	sub	r28, r26
 f96:	db 0b       	sbc	r29, r27
 f98:	0f b6       	in	r0, 0x3f	; 63
 f9a:	f8 94       	cli
 f9c:	de bf       	out	0x3e, r29	; 62
 f9e:	0f be       	out	0x3f, r0	; 63
 fa0:	cd bf       	out	0x3d, r28	; 61
 fa2:	09 94       	ijmp

00000fa4 <__epilogue_restores__>:
 fa4:	2a 88       	ldd	r2, Y+18	; 0x12
 fa6:	39 88       	ldd	r3, Y+17	; 0x11
 fa8:	48 88       	ldd	r4, Y+16	; 0x10
 faa:	5f 84       	ldd	r5, Y+15	; 0x0f
 fac:	6e 84       	ldd	r6, Y+14	; 0x0e
 fae:	7d 84       	ldd	r7, Y+13	; 0x0d
 fb0:	8c 84       	ldd	r8, Y+12	; 0x0c
 fb2:	9b 84       	ldd	r9, Y+11	; 0x0b
 fb4:	aa 84       	ldd	r10, Y+10	; 0x0a
 fb6:	b9 84       	ldd	r11, Y+9	; 0x09
 fb8:	c8 84       	ldd	r12, Y+8	; 0x08
 fba:	df 80       	ldd	r13, Y+7	; 0x07
 fbc:	ee 80       	ldd	r14, Y+6	; 0x06
 fbe:	fd 80       	ldd	r15, Y+5	; 0x05
 fc0:	0c 81       	ldd	r16, Y+4	; 0x04
 fc2:	1b 81       	ldd	r17, Y+3	; 0x03
 fc4:	aa 81       	ldd	r26, Y+2	; 0x02
 fc6:	b9 81       	ldd	r27, Y+1	; 0x01
 fc8:	ce 0f       	add	r28, r30
 fca:	d1 1d       	adc	r29, r1
 fcc:	0f b6       	in	r0, 0x3f	; 63
 fce:	f8 94       	cli
 fd0:	de bf       	out	0x3e, r29	; 62
 fd2:	0f be       	out	0x3f, r0	; 63
 fd4:	cd bf       	out	0x3d, r28	; 61
 fd6:	ed 01       	movw	r28, r26
 fd8:	08 95       	ret

00000fda <_exit>:
 fda:	f8 94       	cli

00000fdc <__stop_program>:
 fdc:	ff cf       	rjmp	.-2      	; 0xfdc <__stop_program>
