module.exports = (function() {
const SerialPort = require('serialport');
const serialport = SerialPort.SerialPort;  
const filesystem = require('fs');
const util = require("util");
const eventEmitter = require('events').EventEmitter;
var console = { log: require("debug")("driver") };


function sensor(config) {
	eventEmitter.call(this);
	console.log('received config parameters are '+ JSON.stringify(config));
    	this._config = config;
	this._serialPort = null;
	this._timer = 0;
	this._co2 = 0;
	this._tvoc = 0;
	this._temperature = 0;
	this._humidity = 0;
	this._cozir = 0;
}

util.inherits(sensor, eventEmitter);

var log;
var port2 = new serialport('/dev/ttyUSB1', {
                baudrate: 9600,
                parser: SerialPort.parsers.readline('\n')
        });
sensor.prototype.start = function(){
	var self = this;
	var port = new serialport('/dev/ttyUSB0', {
		baudrate: 38400,
		parser: SerialPort.parsers.readline('\n')
	});
	
	/*var port2 = new serialport('/dev/ttyUSB1', {
		baudrate: 9600,
		parser: SerialPort.parsers.readline('\n')
	});*/

	port.on('open', function() {
	//log = filesystem.createWriteStream(
	//		'testold.txt',
	//		{flags: 'w'});
	console.log("Serial Port for CCS811 Opened" + "\n");
	});
	
	port2.on('open', function() {
	setTimeout(function() { 
		port2.write("*\r\n");
	 }, 1000);

        setTimeout(function() { 
		port2.write("K 2\r\n");
	}, 5000);
	console.log("Serial Port for COZIR Opened" + "\n");
	});

	port.on('data', function(data) {
		onDataReceived.call(self, data);
	});

	port2.on('data', function(data) {
		handlecozir.call(self,data);
	});
}



var poll = function() {
    setTimeout(function() { port2.write("Z\r\n"); }, 500);
    //setTimeout(function() { port2.write("T\r\n"); }, 1000);
    //setTimeout(function() { port2.write("H\r\n"); }, 1500);
  };

var handlecozir = function(data){
	var self = this;
	switch (data[1]) {
        case "Z":
                var cozir = parseFloat(data.substr(3));
                this._cozir = cozir;
                console.log('cozir value updated');
                break;
        case "K":
                setInterval(function() {
                        poll.call()
                }, 10000
                );
                console.log("COZIR POLL MODE");
                break;
        default:
                console.log("ignoring data: " + data + "\n");
        break;
        }
}
var onDataReceived = function(data) {
	var self = this;

	switch (data[0]) {
		case "C":
			var co2 = parseFloat(data.substr(3));
			if (co2 !== this._co2) {
				this._co2 = co2;
				//log.write(Date.now(), co2);
				//console.log(Date.now(), co2);
				this.emit("data", this._config.feedId, { timestamp: Date.now(), COZIR: this._cozir, co2: co2, tvoc: this._tvoc, humidity: this._humidity, temperature: this._temperature});
			}
			break;

		case "V":
			var tvoc = parseFloat(data.substr(3));
			if (tvoc !== this._tvoc) {
				this._tvoc = tvoc;
				this.emit("data",this._config.feedId, { timestamp: Date.now(), COZIR: this._cozir, co2: this._co2, tvoc: tvoc, humidity: this._humidity, temperature: this._temperature });
			}
			break;

		case "H":
			var humidity = parseFloat(data.substr(3));
			if (humidity !== this._humidity) {
				this._humidity = humidity;
				this.emit("data",this._config.feedId, { timestamp: Date.now(), COZIR: this._cozir, co2: this._co2, tvoc: this._tvoc, humidity: humidity, temperature: this._temperature });
			}
			break;	
		case "T":	
			var temp = parseFloat(data.substr(3));
			if (temp !== this._temperature) {
				this._temperature = temp;
				this.emit("data",this._config.feedId, { timestamp: Date.now(), COZIR: this._cozir,  co2: this._co2, tvoc: this._tvoc, humidity: this._humidity, temperature: temp });
			}
			break;		

		default:
			console.log("ignoring data: " + data + "\n");			
			break;
			}

};
return sensor;
}());

